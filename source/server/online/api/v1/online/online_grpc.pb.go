// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/online/online.proto

package online

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Online_RegisterDevice_FullMethodName   = "/api.v1.online.Online/RegisterDevice"
	Online_UnregisterDevice_FullMethodName = "/api.v1.online.Online/UnregisterDevice"
	Online_GetOnlineDevices_FullMethodName = "/api.v1.online.Online/GetOnlineDevices"
	Online_GetOnlineDevice_FullMethodName  = "/api.v1.online.Online/GetOnlineDevice"
)

// OnlineClient is the client API for Online service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineClient interface {
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*UnregisterDeviceResponse, error)
	GetOnlineDevices(ctx context.Context, in *GetOnlineDevicesRequest, opts ...grpc.CallOption) (*GetOnlineDevicesResponse, error)
	GetOnlineDevice(ctx context.Context, in *GetOnlineDeviceRequest, opts ...grpc.CallOption) (*GetOnlineDeviceResponse, error)
}

type onlineClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineClient(cc grpc.ClientConnInterface) OnlineClient {
	return &onlineClient{cc}
}

func (c *onlineClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, Online_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineClient) UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*UnregisterDeviceResponse, error) {
	out := new(UnregisterDeviceResponse)
	err := c.cc.Invoke(ctx, Online_UnregisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineClient) GetOnlineDevices(ctx context.Context, in *GetOnlineDevicesRequest, opts ...grpc.CallOption) (*GetOnlineDevicesResponse, error) {
	out := new(GetOnlineDevicesResponse)
	err := c.cc.Invoke(ctx, Online_GetOnlineDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineClient) GetOnlineDevice(ctx context.Context, in *GetOnlineDeviceRequest, opts ...grpc.CallOption) (*GetOnlineDeviceResponse, error) {
	out := new(GetOnlineDeviceResponse)
	err := c.cc.Invoke(ctx, Online_GetOnlineDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineServer is the server API for Online service.
// All implementations must embed UnimplementedOnlineServer
// for forward compatibility
type OnlineServer interface {
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*UnregisterDeviceResponse, error)
	GetOnlineDevices(context.Context, *GetOnlineDevicesRequest) (*GetOnlineDevicesResponse, error)
	GetOnlineDevice(context.Context, *GetOnlineDeviceRequest) (*GetOnlineDeviceResponse, error)
	mustEmbedUnimplementedOnlineServer()
}

// UnimplementedOnlineServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineServer struct {
}

func (UnimplementedOnlineServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedOnlineServer) UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*UnregisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterDevice not implemented")
}
func (UnimplementedOnlineServer) GetOnlineDevices(context.Context, *GetOnlineDevicesRequest) (*GetOnlineDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineDevices not implemented")
}
func (UnimplementedOnlineServer) GetOnlineDevice(context.Context, *GetOnlineDeviceRequest) (*GetOnlineDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineDevice not implemented")
}
func (UnimplementedOnlineServer) mustEmbedUnimplementedOnlineServer() {}

// UnsafeOnlineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineServer will
// result in compilation errors.
type UnsafeOnlineServer interface {
	mustEmbedUnimplementedOnlineServer()
}

func RegisterOnlineServer(s grpc.ServiceRegistrar, srv OnlineServer) {
	s.RegisterService(&Online_ServiceDesc, srv)
}

func _Online_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Online_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Online_UnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).UnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Online_UnregisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).UnregisterDevice(ctx, req.(*UnregisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Online_GetOnlineDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).GetOnlineDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Online_GetOnlineDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).GetOnlineDevices(ctx, req.(*GetOnlineDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Online_GetOnlineDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).GetOnlineDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Online_GetOnlineDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).GetOnlineDevice(ctx, req.(*GetOnlineDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Online_ServiceDesc is the grpc.ServiceDesc for Online service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Online_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.online.Online",
	HandlerType: (*OnlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _Online_RegisterDevice_Handler,
		},
		{
			MethodName: "UnregisterDevice",
			Handler:    _Online_UnregisterDevice_Handler,
		},
		{
			MethodName: "GetOnlineDevices",
			Handler:    _Online_GetOnlineDevices_Handler,
		},
		{
			MethodName: "GetOnlineDevice",
			Handler:    _Online_GetOnlineDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/online/online.proto",
}
