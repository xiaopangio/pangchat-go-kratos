// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/online/online.proto

package online

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceRequestMultiError, or nil if none found.
func (m *RegisterDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for DeviceUrl

	if len(errors) > 0 {
		return RegisterDeviceRequestMultiError(errors)
	}

	return nil
}

// RegisterDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceRequestMultiError) AllErrors() []error { return m }

// RegisterDeviceRequestValidationError is the validation error returned by
// RegisterDeviceRequest.Validate if the designated constraints aren't met.
type RegisterDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceRequestValidationError) ErrorName() string {
	return "RegisterDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceRequestValidationError{}

// Validate checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceResponseMultiError, or nil if none found.
func (m *RegisterDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterDeviceResponseMultiError(errors)
	}

	return nil
}

// RegisterDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceResponseMultiError) AllErrors() []error { return m }

// RegisterDeviceResponseValidationError is the validation error returned by
// RegisterDeviceResponse.Validate if the designated constraints aren't met.
type RegisterDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceResponseValidationError) ErrorName() string {
	return "RegisterDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceResponseValidationError{}

// Validate checks the field values on UnregisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterDeviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterDeviceRequestMultiError, or nil if none found.
func (m *UnregisterDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return UnregisterDeviceRequestMultiError(errors)
	}

	return nil
}

// UnregisterDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by UnregisterDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type UnregisterDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterDeviceRequestMultiError) AllErrors() []error { return m }

// UnregisterDeviceRequestValidationError is the validation error returned by
// UnregisterDeviceRequest.Validate if the designated constraints aren't met.
type UnregisterDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterDeviceRequestValidationError) ErrorName() string {
	return "UnregisterDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterDeviceRequestValidationError{}

// Validate checks the field values on UnregisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterDeviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterDeviceResponseMultiError, or nil if none found.
func (m *UnregisterDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnregisterDeviceResponseMultiError(errors)
	}

	return nil
}

// UnregisterDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by UnregisterDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type UnregisterDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterDeviceResponseMultiError) AllErrors() []error { return m }

// UnregisterDeviceResponseValidationError is the validation error returned by
// UnregisterDeviceResponse.Validate if the designated constraints aren't met.
type UnregisterDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterDeviceResponseValidationError) ErrorName() string {
	return "UnregisterDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterDeviceResponseValidationError{}

// Validate checks the field values on GetOnlineDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOnlineDevicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOnlineDevicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOnlineDevicesRequestMultiError, or nil if none found.
func (m *GetOnlineDevicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOnlineDevicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOnlineDevicesRequestMultiError(errors)
	}

	return nil
}

// GetOnlineDevicesRequestMultiError is an error wrapping multiple validation
// errors returned by GetOnlineDevicesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOnlineDevicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOnlineDevicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOnlineDevicesRequestMultiError) AllErrors() []error { return m }

// GetOnlineDevicesRequestValidationError is the validation error returned by
// GetOnlineDevicesRequest.Validate if the designated constraints aren't met.
type GetOnlineDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOnlineDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOnlineDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOnlineDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOnlineDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOnlineDevicesRequestValidationError) ErrorName() string {
	return "GetOnlineDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOnlineDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOnlineDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOnlineDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOnlineDevicesRequestValidationError{}

// Validate checks the field values on OnlineDevice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnlineDevice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineDevice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnlineDeviceMultiError, or
// nil if none found.
func (m *OnlineDevice) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineDevice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for DeviceUrl

	if len(errors) > 0 {
		return OnlineDeviceMultiError(errors)
	}

	return nil
}

// OnlineDeviceMultiError is an error wrapping multiple validation errors
// returned by OnlineDevice.ValidateAll() if the designated constraints aren't met.
type OnlineDeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineDeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineDeviceMultiError) AllErrors() []error { return m }

// OnlineDeviceValidationError is the validation error returned by
// OnlineDevice.Validate if the designated constraints aren't met.
type OnlineDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineDeviceValidationError) ErrorName() string { return "OnlineDeviceValidationError" }

// Error satisfies the builtin error interface
func (e OnlineDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineDeviceValidationError{}

// Validate checks the field values on GetOnlineDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOnlineDevicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOnlineDevicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOnlineDevicesResponseMultiError, or nil if none found.
func (m *GetOnlineDevicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOnlineDevicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOnlineDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOnlineDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOnlineDevicesResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOnlineDevicesResponseMultiError(errors)
	}

	return nil
}

// GetOnlineDevicesResponseMultiError is an error wrapping multiple validation
// errors returned by GetOnlineDevicesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOnlineDevicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOnlineDevicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOnlineDevicesResponseMultiError) AllErrors() []error { return m }

// GetOnlineDevicesResponseValidationError is the validation error returned by
// GetOnlineDevicesResponse.Validate if the designated constraints aren't met.
type GetOnlineDevicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOnlineDevicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOnlineDevicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOnlineDevicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOnlineDevicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOnlineDevicesResponseValidationError) ErrorName() string {
	return "GetOnlineDevicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOnlineDevicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOnlineDevicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOnlineDevicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOnlineDevicesResponseValidationError{}

// Validate checks the field values on GetOnlineDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOnlineDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOnlineDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOnlineDeviceRequestMultiError, or nil if none found.
func (m *GetOnlineDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOnlineDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetOnlineDeviceRequestMultiError(errors)
	}

	return nil
}

// GetOnlineDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by GetOnlineDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOnlineDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOnlineDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOnlineDeviceRequestMultiError) AllErrors() []error { return m }

// GetOnlineDeviceRequestValidationError is the validation error returned by
// GetOnlineDeviceRequest.Validate if the designated constraints aren't met.
type GetOnlineDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOnlineDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOnlineDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOnlineDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOnlineDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOnlineDeviceRequestValidationError) ErrorName() string {
	return "GetOnlineDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOnlineDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOnlineDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOnlineDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOnlineDeviceRequestValidationError{}

// Validate checks the field values on GetOnlineDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOnlineDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOnlineDeviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOnlineDeviceResponseMultiError, or nil if none found.
func (m *GetOnlineDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOnlineDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceUrl

	if len(errors) > 0 {
		return GetOnlineDeviceResponseMultiError(errors)
	}

	return nil
}

// GetOnlineDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by GetOnlineDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOnlineDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOnlineDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOnlineDeviceResponseMultiError) AllErrors() []error { return m }

// GetOnlineDeviceResponseValidationError is the validation error returned by
// GetOnlineDeviceResponse.Validate if the designated constraints aren't met.
type GetOnlineDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOnlineDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOnlineDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOnlineDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOnlineDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOnlineDeviceResponseValidationError) ErrorName() string {
	return "GetOnlineDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOnlineDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOnlineDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOnlineDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOnlineDeviceResponseValidationError{}
