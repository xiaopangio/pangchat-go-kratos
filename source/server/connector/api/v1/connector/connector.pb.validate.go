// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/connector/connector.proto

package connector

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on UserAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAddressMultiError, or
// nil if none found.
func (m *UserAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityId

	// no validation rules for City

	// no validation rules for Province

	if len(errors) > 0 {
		return UserAddressMultiError(errors)
	}

	return nil
}

// UserAddressMultiError is an error wrapping multiple validation errors
// returned by UserAddress.ValidateAll() if the designated constraints aren't met.
type UserAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAddressMultiError) AllErrors() []error { return m }

// UserAddressValidationError is the validation error returned by
// UserAddress.Validate if the designated constraints aren't met.
type UserAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAddressValidationError) ErrorName() string { return "UserAddressValidationError" }

// Error satisfies the builtin error interface
func (e UserAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAddressValidationError{}

// Validate checks the field values on Province with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Province) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Province with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProvinceMultiError, or nil
// if none found.
func (m *Province) ValidateAll() error {
	return m.validate(true)
}

func (m *Province) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProvinceId

	// no validation rules for ProvinceName

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProvinceValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProvinceValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProvinceValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProvinceMultiError(errors)
	}

	return nil
}

// ProvinceMultiError is an error wrapping multiple validation errors returned
// by Province.ValidateAll() if the designated constraints aren't met.
type ProvinceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvinceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvinceMultiError) AllErrors() []error { return m }

// ProvinceValidationError is the validation error returned by
// Province.Validate if the designated constraints aren't met.
type ProvinceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvinceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvinceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvinceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvinceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvinceValidationError) ErrorName() string { return "ProvinceValidationError" }

// Error satisfies the builtin error interface
func (e ProvinceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvince.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvinceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvinceValidationError{}

// Validate checks the field values on City with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *City) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on City with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CityMultiError, or nil if none found.
func (m *City) ValidateAll() error {
	return m.validate(true)
}

func (m *City) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityId

	// no validation rules for CityName

	if len(errors) > 0 {
		return CityMultiError(errors)
	}

	return nil
}

// CityMultiError is an error wrapping multiple validation errors returned by
// City.ValidateAll() if the designated constraints aren't met.
type CityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CityMultiError) AllErrors() []error { return m }

// CityValidationError is the validation error returned by City.Validate if the
// designated constraints aren't met.
type CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CityValidationError) ErrorName() string { return "CityValidationError" }

// Error satisfies the builtin error interface
func (e CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CityValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for AccountId

	// no validation rules for NickName

	// no validation rules for PersonalDesc

	// no validation rules for AvatarUrl

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on PushFriendRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushFriendRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushFriendRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushFriendRequestsRequestMultiError, or nil if none found.
func (m *PushFriendRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushFriendRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushFriendRequestsRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushFriendRequestsRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushFriendRequestsRequestValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PushFriendRequestsRequestMultiError(errors)
	}

	return nil
}

// PushFriendRequestsRequestMultiError is an error wrapping multiple validation
// errors returned by PushFriendRequestsRequest.ValidateAll() if the
// designated constraints aren't met.
type PushFriendRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushFriendRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushFriendRequestsRequestMultiError) AllErrors() []error { return m }

// PushFriendRequestsRequestValidationError is the validation error returned by
// PushFriendRequestsRequest.Validate if the designated constraints aren't met.
type PushFriendRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFriendRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFriendRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFriendRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFriendRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFriendRequestsRequestValidationError) ErrorName() string {
	return "PushFriendRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushFriendRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFriendRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFriendRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFriendRequestsRequestValidationError{}

// Validate checks the field values on PushFriendRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushFriendRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushFriendRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushFriendRequestsResponseMultiError, or nil if none found.
func (m *PushFriendRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushFriendRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushFriendRequestsResponseMultiError(errors)
	}

	return nil
}

// PushFriendRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by PushFriendRequestsResponse.ValidateAll() if
// the designated constraints aren't met.
type PushFriendRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushFriendRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushFriendRequestsResponseMultiError) AllErrors() []error { return m }

// PushFriendRequestsResponseValidationError is the validation error returned
// by PushFriendRequestsResponse.Validate if the designated constraints aren't met.
type PushFriendRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFriendRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFriendRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFriendRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFriendRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFriendRequestsResponseValidationError) ErrorName() string {
	return "PushFriendRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushFriendRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFriendRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFriendRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFriendRequestsResponseValidationError{}

// Validate checks the field values on PushFriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushFriendRequestMultiError, or nil if none found.
func (m *PushFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushFriendRequestValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushFriendRequestValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushFriendRequestValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PushFriendRequestMultiError(errors)
	}

	return nil
}

// PushFriendRequestMultiError is an error wrapping multiple validation errors
// returned by PushFriendRequest.ValidateAll() if the designated constraints
// aren't met.
type PushFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushFriendRequestMultiError) AllErrors() []error { return m }

// PushFriendRequestValidationError is the validation error returned by
// PushFriendRequest.Validate if the designated constraints aren't met.
type PushFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFriendRequestValidationError) ErrorName() string {
	return "PushFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFriendRequestValidationError{}

// Validate checks the field values on PushFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushFriendResponseMultiError, or nil if none found.
func (m *PushFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushFriendResponseMultiError(errors)
	}

	return nil
}

// PushFriendResponseMultiError is an error wrapping multiple validation errors
// returned by PushFriendResponse.ValidateAll() if the designated constraints
// aren't met.
type PushFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushFriendResponseMultiError) AllErrors() []error { return m }

// PushFriendResponseValidationError is the validation error returned by
// PushFriendResponse.Validate if the designated constraints aren't met.
type PushFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFriendResponseValidationError) ErrorName() string {
	return "PushFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFriendResponseValidationError{}

// Validate checks the field values on PushMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushMessageRequestMultiError, or nil if none found.
func (m *PushMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushMessageRequestMultiError(errors)
	}

	return nil
}

// PushMessageRequestMultiError is an error wrapping multiple validation errors
// returned by PushMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type PushMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMessageRequestMultiError) AllErrors() []error { return m }

// PushMessageRequestValidationError is the validation error returned by
// PushMessageRequest.Validate if the designated constraints aren't met.
type PushMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMessageRequestValidationError) ErrorName() string {
	return "PushMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMessageRequestValidationError{}

// Validate checks the field values on PushMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushMessageResponseMultiError, or nil if none found.
func (m *PushMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushMessageResponseMultiError(errors)
	}

	return nil
}

// PushMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PushMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PushMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMessageResponseMultiError) AllErrors() []error { return m }

// PushMessageResponseValidationError is the validation error returned by
// PushMessageResponse.Validate if the designated constraints aren't met.
type PushMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMessageResponseValidationError) ErrorName() string {
	return "PushMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMessageResponseValidationError{}

// Validate checks the field values on ReplyMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplyMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyMessageRequestMultiError, or nil if none found.
func (m *ReplyMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplyMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplyMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplyMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReplyMessageRequestMultiError(errors)
	}

	return nil
}

// ReplyMessageRequestMultiError is an error wrapping multiple validation
// errors returned by ReplyMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type ReplyMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyMessageRequestMultiError) AllErrors() []error { return m }

// ReplyMessageRequestValidationError is the validation error returned by
// ReplyMessageRequest.Validate if the designated constraints aren't met.
type ReplyMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyMessageRequestValidationError) ErrorName() string {
	return "ReplyMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyMessageRequestValidationError{}

// Validate checks the field values on ReplyMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplyMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyMessageResponseMultiError, or nil if none found.
func (m *ReplyMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReplyMessageResponseMultiError(errors)
	}

	return nil
}

// ReplyMessageResponseMultiError is an error wrapping multiple validation
// errors returned by ReplyMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type ReplyMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyMessageResponseMultiError) AllErrors() []error { return m }

// ReplyMessageResponseValidationError is the validation error returned by
// ReplyMessageResponse.Validate if the designated constraints aren't met.
type ReplyMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyMessageResponseValidationError) ErrorName() string {
	return "ReplyMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyMessageResponseValidationError{}

// Validate checks the field values on PushUnreadMessageListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushUnreadMessageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushUnreadMessageListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushUnreadMessageListRequestMultiError, or nil if none found.
func (m *PushUnreadMessageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushUnreadMessageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushUnreadMessageListRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushUnreadMessageListRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushUnreadMessageListRequestValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PushUnreadMessageListRequestMultiError(errors)
	}

	return nil
}

// PushUnreadMessageListRequestMultiError is an error wrapping multiple
// validation errors returned by PushUnreadMessageListRequest.ValidateAll() if
// the designated constraints aren't met.
type PushUnreadMessageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushUnreadMessageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushUnreadMessageListRequestMultiError) AllErrors() []error { return m }

// PushUnreadMessageListRequestValidationError is the validation error returned
// by PushUnreadMessageListRequest.Validate if the designated constraints
// aren't met.
type PushUnreadMessageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushUnreadMessageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushUnreadMessageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushUnreadMessageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushUnreadMessageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushUnreadMessageListRequestValidationError) ErrorName() string {
	return "PushUnreadMessageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushUnreadMessageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushUnreadMessageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushUnreadMessageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushUnreadMessageListRequestValidationError{}

// Validate checks the field values on PushUnreadMessageListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushUnreadMessageListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushUnreadMessageListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PushUnreadMessageListResponseMultiError, or nil if none found.
func (m *PushUnreadMessageListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushUnreadMessageListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushUnreadMessageListResponseMultiError(errors)
	}

	return nil
}

// PushUnreadMessageListResponseMultiError is an error wrapping multiple
// validation errors returned by PushUnreadMessageListResponse.ValidateAll()
// if the designated constraints aren't met.
type PushUnreadMessageListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushUnreadMessageListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushUnreadMessageListResponseMultiError) AllErrors() []error { return m }

// PushUnreadMessageListResponseValidationError is the validation error
// returned by PushUnreadMessageListResponse.Validate if the designated
// constraints aren't met.
type PushUnreadMessageListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushUnreadMessageListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushUnreadMessageListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushUnreadMessageListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushUnreadMessageListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushUnreadMessageListResponseValidationError) ErrorName() string {
	return "PushUnreadMessageListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushUnreadMessageListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushUnreadMessageListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushUnreadMessageListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushUnreadMessageListResponseValidationError{}
