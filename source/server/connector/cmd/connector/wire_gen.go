// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"connector/internal/biz"
	"connector/internal/components/broker"
	"connector/internal/components/cache"
	"connector/internal/components/client"
	"connector/internal/components/logger"
	"connector/internal/components/mysql"
	"connector/internal/components/redis"
	"connector/internal/components/registry"
	"connector/internal/components/websocket"
	"connector/internal/conf"
	"connector/internal/data"
	"connector/internal/server"
	"connector/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logLogger log.Logger) (*kratos.App, func(), error) {
	helper := logger.NewHelper(logLogger)
	clientv3Client, err := registry.NewEtcdClient(bootstrap, helper)
	if err != nil {
		return nil, nil, err
	}
	connectorRegistry := registry.NewConnectorRegistry(bootstrap, clientv3Client)
	redisRedis := redis.NewRedisClient(bootstrap, helper)
	db := mysql.NewMysql(bootstrap)
	dataData, cleanup, err := data.NewData(redisRedis, db, helper)
	if err != nil {
		return nil, nil, err
	}
	connectorServiceRepo := data.NewConnectorRepoImpl(dataData, helper)
	onlineRegistry := registry.NewOnlineRegistry(bootstrap, clientv3Client)
	onlineClient, err := client.NewOnlineClient(onlineRegistry, helper, bootstrap)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	upgrader := websocket.NewUpgrader()
	connectionCache := cache.NewConnectionCache()
	kafkaBroker := broker.NewKafkaBroker(helper, bootstrap)
	connectorServiceBiz := biz.NewConnectorServiceBiz(connectorServiceRepo, helper, onlineClient, upgrader, connectionCache, bootstrap, kafkaBroker, redisRedis)
	connectorServiceService := service.NewConnectorServiceService(connectorServiceBiz, helper)
	grpcServer := server.NewGRPCServer(bootstrap, connectorServiceService, helper)
	httpServer := server.NewHTTPServer(bootstrap, connectorServiceService)
	app := newApp(logLogger, bootstrap, connectorRegistry, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
