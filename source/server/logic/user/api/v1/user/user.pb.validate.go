// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProfileMultiError, or
// nil if none found.
func (m *UserProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AccountId

	// no validation rules for Phone

	// no validation rules for NickName

	if all {
		switch v := interface{}(m.GetUserAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProfileValidationError{
					field:  "UserAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProfileValidationError{
					field:  "UserAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProfileValidationError{
				field:  "UserAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PersonalDesc

	// no validation rules for NoteName

	// no validation rules for Avatar

	if len(errors) > 0 {
		return UserProfileMultiError(errors)
	}

	return nil
}

// UserProfileMultiError is an error wrapping multiple validation errors
// returned by UserProfile.ValidateAll() if the designated constraints aren't met.
type UserProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileMultiError) AllErrors() []error { return m }

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on UserAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAddressMultiError, or
// nil if none found.
func (m *UserAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityId

	// no validation rules for City

	// no validation rules for Province

	if len(errors) > 0 {
		return UserAddressMultiError(errors)
	}

	return nil
}

// UserAddressMultiError is an error wrapping multiple validation errors
// returned by UserAddress.ValidateAll() if the designated constraints aren't met.
type UserAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAddressMultiError) AllErrors() []error { return m }

// UserAddressValidationError is the validation error returned by
// UserAddress.Validate if the designated constraints aren't met.
type UserAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAddressValidationError) ErrorName() string { return "UserAddressValidationError" }

// Error satisfies the builtin error interface
func (e UserAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAddressValidationError{}

// Validate checks the field values on Province with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Province) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Province with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProvinceMultiError, or nil
// if none found.
func (m *Province) ValidateAll() error {
	return m.validate(true)
}

func (m *Province) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProvinceId

	// no validation rules for ProvinceName

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProvinceValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProvinceValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProvinceValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProvinceMultiError(errors)
	}

	return nil
}

// ProvinceMultiError is an error wrapping multiple validation errors returned
// by Province.ValidateAll() if the designated constraints aren't met.
type ProvinceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvinceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvinceMultiError) AllErrors() []error { return m }

// ProvinceValidationError is the validation error returned by
// Province.Validate if the designated constraints aren't met.
type ProvinceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvinceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvinceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvinceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvinceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvinceValidationError) ErrorName() string { return "ProvinceValidationError" }

// Error satisfies the builtin error interface
func (e ProvinceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvince.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvinceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvinceValidationError{}

// Validate checks the field values on City with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *City) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on City with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CityMultiError, or nil if none found.
func (m *City) ValidateAll() error {
	return m.validate(true)
}

func (m *City) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityId

	// no validation rules for CityName

	if len(errors) > 0 {
		return CityMultiError(errors)
	}

	return nil
}

// CityMultiError is an error wrapping multiple validation errors returned by
// City.ValidateAll() if the designated constraints aren't met.
type CityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CityMultiError) AllErrors() []error { return m }

// CityValidationError is the validation error returned by City.Validate if the
// designated constraints aren't met.
type CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CityValidationError) ErrorName() string { return "CityValidationError" }

// Error satisfies the builtin error interface
func (e CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CityValidationError{}

// Validate checks the field values on AddressList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressListMultiError, or
// nil if none found.
func (m *AddressList) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProvinces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressListValidationError{
						field:  fmt.Sprintf("Provinces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressListValidationError{
						field:  fmt.Sprintf("Provinces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressListValidationError{
					field:  fmt.Sprintf("Provinces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressListMultiError(errors)
	}

	return nil
}

// AddressListMultiError is an error wrapping multiple validation errors
// returned by AddressList.ValidateAll() if the designated constraints aren't met.
type AddressListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressListMultiError) AllErrors() []error { return m }

// AddressListValidationError is the validation error returned by
// AddressList.Validate if the designated constraints aren't met.
type AddressListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressListValidationError) ErrorName() string { return "AddressListValidationError" }

// Error satisfies the builtin error interface
func (e AddressListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressListValidationError{}

// Validate checks the field values on ImageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageInfoMultiError, or nil
// if none found.
func (m *ImageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageName

	// no validation rules for ImageType

	// no validation rules for AccountId

	if len(errors) > 0 {
		return ImageInfoMultiError(errors)
	}

	return nil
}

// ImageInfoMultiError is an error wrapping multiple validation errors returned
// by ImageInfo.ValidateAll() if the designated constraints aren't met.
type ImageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageInfoMultiError) AllErrors() []error { return m }

// ImageInfoValidationError is the validation error returned by
// ImageInfo.Validate if the designated constraints aren't met.
type ImageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageInfoValidationError) ErrorName() string { return "ImageInfoValidationError" }

// Error satisfies the builtin error interface
func (e ImageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageInfoValidationError{}

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingReplyMultiError, or nil
// if none found.
func (m *PingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingReplyMultiError(errors)
	}

	return nil
}

// PingReplyMultiError is an error wrapping multiple validation errors returned
// by PingReply.ValidateAll() if the designated constraints aren't met.
type PingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReplyMultiError) AllErrors() []error { return m }

// PingReplyValidationError is the validation error returned by
// PingReply.Validate if the designated constraints aren't met.
type PingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReplyValidationError) ErrorName() string { return "PingReplyValidationError" }

// Error satisfies the builtin error interface
func (e PingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReplyValidationError{}

// Validate checks the field values on RegisterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserRequestMultiError, or nil if none found.
func (m *RegisterUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _RegisterUserRequest_Type_InLookup[m.GetType()]; !ok {
		err := RegisterUserRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 8 || l > 25 {
		err := RegisterUserRequestValidationError{
			field:  "Username",
			reason: "value length must be between 8 and 25 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) != 40 {
		err := RegisterUserRequestValidationError{
			field:  "Password",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetPasswordConfirm()) != 40 {
		err := RegisterUserRequestValidationError{
			field:  "PasswordConfirm",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetNickName()); l < 1 || l > 20 {
		err := RegisterUserRequestValidationError{
			field:  "NickName",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatarUrl()); l < 1 || l > 255 {
		err := RegisterUserRequestValidationError{
			field:  "AvatarUrl",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterUserRequestMultiError(errors)
	}

	return nil
}

// RegisterUserRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserRequestMultiError) AllErrors() []error { return m }

// RegisterUserRequestValidationError is the validation error returned by
// RegisterUserRequest.Validate if the designated constraints aren't met.
type RegisterUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserRequestValidationError) ErrorName() string {
	return "RegisterUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserRequestValidationError{}

var _RegisterUserRequest_Type_InLookup = map[int64]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on RegisterUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserReplyMultiError, or nil if none found.
func (m *RegisterUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterUserReplyMultiError(errors)
	}

	return nil
}

// RegisterUserReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterUserReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserReplyMultiError) AllErrors() []error { return m }

// RegisterUserReplyValidationError is the validation error returned by
// RegisterUserReply.Validate if the designated constraints aren't met.
type RegisterUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserReplyValidationError) ErrorName() string {
	return "RegisterUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserReplyValidationError{}

// Validate checks the field values on SendSmsCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSmsCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSmsCodeRequestMultiError, or nil if none found.
func (m *SendSmsCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SendSmsCodeRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := SendSmsCodeRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendSmsCodeRequestMultiError(errors)
	}

	return nil
}

// SendSmsCodeRequestMultiError is an error wrapping multiple validation errors
// returned by SendSmsCodeRequest.ValidateAll() if the designated constraints
// aren't met.
type SendSmsCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsCodeRequestMultiError) AllErrors() []error { return m }

// SendSmsCodeRequestValidationError is the validation error returned by
// SendSmsCodeRequest.Validate if the designated constraints aren't met.
type SendSmsCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsCodeRequestValidationError) ErrorName() string {
	return "SendSmsCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSmsCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsCodeRequestValidationError{}

var _SendSmsCodeRequest_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on SendSmsCodeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendSmsCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSmsCodeReplyMultiError, or nil if none found.
func (m *SendSmsCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSmsCodeReplyMultiError(errors)
	}

	return nil
}

// SendSmsCodeReplyMultiError is an error wrapping multiple validation errors
// returned by SendSmsCodeReply.ValidateAll() if the designated constraints
// aren't met.
type SendSmsCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsCodeReplyMultiError) AllErrors() []error { return m }

// SendSmsCodeReplyValidationError is the validation error returned by
// SendSmsCodeReply.Validate if the designated constraints aren't met.
type SendSmsCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsCodeReplyValidationError) ErrorName() string { return "SendSmsCodeReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendSmsCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsCodeReplyValidationError{}

// Validate checks the field values on ModifyPasswdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyPasswdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyPasswdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyPasswdRequestMultiError, or nil if none found.
func (m *ModifyPasswdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyPasswdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetOldPassword()) != 40 {
		err := ModifyPasswdRequestValidationError{
			field:  "OldPassword",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetNewPassword()) != 40 {
		err := ModifyPasswdRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetNewPasswordConfirm()) != 40 {
		err := ModifyPasswdRequestValidationError{
			field:  "NewPasswordConfirm",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ModifyPasswdRequestMultiError(errors)
	}

	return nil
}

// ModifyPasswdRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyPasswdRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyPasswdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyPasswdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyPasswdRequestMultiError) AllErrors() []error { return m }

// ModifyPasswdRequestValidationError is the validation error returned by
// ModifyPasswdRequest.Validate if the designated constraints aren't met.
type ModifyPasswdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyPasswdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyPasswdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyPasswdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyPasswdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyPasswdRequestValidationError) ErrorName() string {
	return "ModifyPasswdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyPasswdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyPasswdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyPasswdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyPasswdRequestValidationError{}

// Validate checks the field values on ModifyPasswdReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModifyPasswdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyPasswdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyPasswdReplyMultiError, or nil if none found.
func (m *ModifyPasswdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyPasswdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ModifyPasswdReplyMultiError(errors)
	}

	return nil
}

// ModifyPasswdReplyMultiError is an error wrapping multiple validation errors
// returned by ModifyPasswdReply.ValidateAll() if the designated constraints
// aren't met.
type ModifyPasswdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyPasswdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyPasswdReplyMultiError) AllErrors() []error { return m }

// ModifyPasswdReplyValidationError is the validation error returned by
// ModifyPasswdReply.Validate if the designated constraints aren't met.
type ModifyPasswdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyPasswdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyPasswdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyPasswdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyPasswdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyPasswdReplyValidationError) ErrorName() string {
	return "ModifyPasswdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyPasswdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyPasswdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyPasswdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyPasswdReplyValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if !_ResetPasswordRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := ResetPasswordRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) != 40 {
		err := ResetPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetPasswordConfirm()) != 40 {
		err := ResetPasswordRequestValidationError{
			field:  "PasswordConfirm",
			reason: "value length must be 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

var _ResetPasswordRequest_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on ResetPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordReplyMultiError, or nil if none found.
func (m *ResetPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordReplyMultiError(errors)
	}

	return nil
}

// ResetPasswordReplyMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordReply.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordReplyMultiError) AllErrors() []error { return m }

// ResetPasswordReplyValidationError is the validation error returned by
// ResetPasswordReply.Validate if the designated constraints aren't met.
type ResetPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReplyValidationError) ErrorName() string {
	return "ResetPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReplyValidationError{}

// Validate checks the field values on ModifyAccountIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyAccountIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyAccountIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyAccountIDRequestMultiError, or nil if none found.
func (m *ModifyAccountIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyAccountIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if !_ModifyAccountIDRequest_AccountId_Pattern.MatchString(m.GetAccountId()) {
		err := ModifyAccountIDRequestValidationError{
			field:  "AccountId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]{8,25}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModifyAccountIDRequestMultiError(errors)
	}

	return nil
}

// ModifyAccountIDRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyAccountIDRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyAccountIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyAccountIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyAccountIDRequestMultiError) AllErrors() []error { return m }

// ModifyAccountIDRequestValidationError is the validation error returned by
// ModifyAccountIDRequest.Validate if the designated constraints aren't met.
type ModifyAccountIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyAccountIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyAccountIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyAccountIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyAccountIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyAccountIDRequestValidationError) ErrorName() string {
	return "ModifyAccountIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyAccountIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyAccountIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyAccountIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyAccountIDRequestValidationError{}

var _ModifyAccountIDRequest_AccountId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]{8,25}$")

// Validate checks the field values on ModifyAccountIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyAccountIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyAccountIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyAccountIDReplyMultiError, or nil if none found.
func (m *ModifyAccountIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyAccountIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyAccountIDReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyAccountIDReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyAccountIDReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyAccountIDReplyMultiError(errors)
	}

	return nil
}

// ModifyAccountIDReplyMultiError is an error wrapping multiple validation
// errors returned by ModifyAccountIDReply.ValidateAll() if the designated
// constraints aren't met.
type ModifyAccountIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyAccountIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyAccountIDReplyMultiError) AllErrors() []error { return m }

// ModifyAccountIDReplyValidationError is the validation error returned by
// ModifyAccountIDReply.Validate if the designated constraints aren't met.
type ModifyAccountIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyAccountIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyAccountIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyAccountIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyAccountIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyAccountIDReplyValidationError) ErrorName() string {
	return "ModifyAccountIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyAccountIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyAccountIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyAccountIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyAccountIDReplyValidationError{}

// Validate checks the field values on ModifyProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyProfileRequestMultiError, or nil if none found.
func (m *ModifyProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := ModifyProfileRequestValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyProfileRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyProfileRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyProfileRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyProfileRequestMultiError(errors)
	}

	return nil
}

// ModifyProfileRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyProfileRequestMultiError) AllErrors() []error { return m }

// ModifyProfileRequestValidationError is the validation error returned by
// ModifyProfileRequest.Validate if the designated constraints aren't met.
type ModifyProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyProfileRequestValidationError) ErrorName() string {
	return "ModifyProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyProfileRequestValidationError{}

// Validate checks the field values on ModifyProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyProfileReplyMultiError, or nil if none found.
func (m *ModifyProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyProfileReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyProfileReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyProfileReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyProfileReplyMultiError(errors)
	}

	return nil
}

// ModifyProfileReplyMultiError is an error wrapping multiple validation errors
// returned by ModifyProfileReply.ValidateAll() if the designated constraints
// aren't met.
type ModifyProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyProfileReplyMultiError) AllErrors() []error { return m }

// ModifyProfileReplyValidationError is the validation error returned by
// ModifyProfileReply.Validate if the designated constraints aren't met.
type ModifyProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyProfileReplyValidationError) ErrorName() string {
	return "ModifyProfileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyProfileReplyValidationError{}

// Validate checks the field values on ProfileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileRequestMultiError,
// or nil if none found.
func (m *ProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ProfileRequest_AccountId_Pattern.MatchString(m.GetAccountId()) {
		err := ProfileRequestValidationError{
			field:  "AccountId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]{8,25}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProfileRequestMultiError(errors)
	}

	return nil
}

// ProfileRequestMultiError is an error wrapping multiple validation errors
// returned by ProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type ProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileRequestMultiError) AllErrors() []error { return m }

// ProfileRequestValidationError is the validation error returned by
// ProfileRequest.Validate if the designated constraints aren't met.
type ProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileRequestValidationError) ErrorName() string { return "ProfileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileRequestValidationError{}

var _ProfileRequest_AccountId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]{8,25}$")

// Validate checks the field values on ProfileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileReplyMultiError, or
// nil if none found.
func (m *ProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileReplyMultiError(errors)
	}

	return nil
}

// ProfileReplyMultiError is an error wrapping multiple validation errors
// returned by ProfileReply.ValidateAll() if the designated constraints aren't met.
type ProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReplyMultiError) AllErrors() []error { return m }

// ProfileReplyValidationError is the validation error returned by
// ProfileReply.Validate if the designated constraints aren't met.
type ProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReplyValidationError) ErrorName() string { return "ProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e ProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReplyValidationError{}

// Validate checks the field values on AddressListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressListRequestMultiError, or nil if none found.
func (m *AddressListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddressListRequestMultiError(errors)
	}

	return nil
}

// AddressListRequestMultiError is an error wrapping multiple validation errors
// returned by AddressListRequest.ValidateAll() if the designated constraints
// aren't met.
type AddressListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressListRequestMultiError) AllErrors() []error { return m }

// AddressListRequestValidationError is the validation error returned by
// AddressListRequest.Validate if the designated constraints aren't met.
type AddressListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressListRequestValidationError) ErrorName() string {
	return "AddressListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressListRequestValidationError{}

// Validate checks the field values on AddressListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddressListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressListReplyMultiError, or nil if none found.
func (m *AddressListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddressList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressListReplyValidationError{
					field:  "AddressList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressListReplyValidationError{
					field:  "AddressList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressListReplyValidationError{
				field:  "AddressList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressListReplyMultiError(errors)
	}

	return nil
}

// AddressListReplyMultiError is an error wrapping multiple validation errors
// returned by AddressListReply.ValidateAll() if the designated constraints
// aren't met.
type AddressListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressListReplyMultiError) AllErrors() []error { return m }

// AddressListReplyValidationError is the validation error returned by
// AddressListReply.Validate if the designated constraints aren't met.
type AddressListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressListReplyValidationError) ErrorName() string { return "AddressListReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddressListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressListReplyValidationError{}

// Validate checks the field values on BindPhoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BindPhoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindPhoneRequestMultiError, or nil if none found.
func (m *BindPhoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindPhoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if !_BindPhoneRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := BindPhoneRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_BindPhoneRequest_SmsCode_Pattern.MatchString(m.GetSmsCode()) {
		err := BindPhoneRequestValidationError{
			field:  "SmsCode",
			reason: "value does not match regex pattern \"^[0-9]{4}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BindPhoneRequestMultiError(errors)
	}

	return nil
}

// BindPhoneRequestMultiError is an error wrapping multiple validation errors
// returned by BindPhoneRequest.ValidateAll() if the designated constraints
// aren't met.
type BindPhoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindPhoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindPhoneRequestMultiError) AllErrors() []error { return m }

// BindPhoneRequestValidationError is the validation error returned by
// BindPhoneRequest.Validate if the designated constraints aren't met.
type BindPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindPhoneRequestValidationError) ErrorName() string { return "BindPhoneRequestValidationError" }

// Error satisfies the builtin error interface
func (e BindPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindPhoneRequestValidationError{}

var _BindPhoneRequest_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")

var _BindPhoneRequest_SmsCode_Pattern = regexp.MustCompile("^[0-9]{4}$")

// Validate checks the field values on BindPhoneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BindPhoneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindPhoneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BindPhoneReplyMultiError,
// or nil if none found.
func (m *BindPhoneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BindPhoneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BindPhoneReplyMultiError(errors)
	}

	return nil
}

// BindPhoneReplyMultiError is an error wrapping multiple validation errors
// returned by BindPhoneReply.ValidateAll() if the designated constraints
// aren't met.
type BindPhoneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindPhoneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindPhoneReplyMultiError) AllErrors() []error { return m }

// BindPhoneReplyValidationError is the validation error returned by
// BindPhoneReply.Validate if the designated constraints aren't met.
type BindPhoneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindPhoneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindPhoneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindPhoneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindPhoneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindPhoneReplyValidationError) ErrorName() string { return "BindPhoneReplyValidationError" }

// Error satisfies the builtin error interface
func (e BindPhoneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindPhoneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindPhoneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindPhoneReplyValidationError{}

// Validate checks the field values on UploadAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadAvatarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadAvatarRequestMultiError, or nil if none found.
func (m *UploadAvatarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadAvatarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *UploadAvatarRequest_Info:
		if v == nil {
			err := UploadAvatarRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadAvatarRequestValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadAvatarRequestValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadAvatarRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UploadAvatarRequest_ChunkData:
		if v == nil {
			err := UploadAvatarRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ChunkData
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UploadAvatarRequestMultiError(errors)
	}

	return nil
}

// UploadAvatarRequestMultiError is an error wrapping multiple validation
// errors returned by UploadAvatarRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadAvatarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadAvatarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadAvatarRequestMultiError) AllErrors() []error { return m }

// UploadAvatarRequestValidationError is the validation error returned by
// UploadAvatarRequest.Validate if the designated constraints aren't met.
type UploadAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadAvatarRequestValidationError) ErrorName() string {
	return "UploadAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadAvatarRequestValidationError{}

// Validate checks the field values on UploadAvatarReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadAvatarReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadAvatarReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadAvatarReplyMultiError, or nil if none found.
func (m *UploadAvatarReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadAvatarReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadAvatarReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadAvatarReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadAvatarReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadAvatarReplyMultiError(errors)
	}

	return nil
}

// UploadAvatarReplyMultiError is an error wrapping multiple validation errors
// returned by UploadAvatarReply.ValidateAll() if the designated constraints
// aren't met.
type UploadAvatarReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadAvatarReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadAvatarReplyMultiError) AllErrors() []error { return m }

// UploadAvatarReplyValidationError is the validation error returned by
// UploadAvatarReply.Validate if the designated constraints aren't met.
type UploadAvatarReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadAvatarReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadAvatarReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadAvatarReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadAvatarReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadAvatarReplyValidationError) ErrorName() string {
	return "UploadAvatarReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UploadAvatarReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadAvatarReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadAvatarReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadAvatarReplyValidationError{}

// Validate checks the field values on GetAvatarRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAvatarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvatarRequestMultiError, or nil if none found.
func (m *GetAvatarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvatarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAvatarUrl()); l < 1 || l > 255 {
		err := GetAvatarRequestValidationError{
			field:  "AvatarUrl",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAvatarRequestMultiError(errors)
	}

	return nil
}

// GetAvatarRequestMultiError is an error wrapping multiple validation errors
// returned by GetAvatarRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAvatarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvatarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvatarRequestMultiError) AllErrors() []error { return m }

// GetAvatarRequestValidationError is the validation error returned by
// GetAvatarRequest.Validate if the designated constraints aren't met.
type GetAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvatarRequestValidationError) ErrorName() string { return "GetAvatarRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvatarRequestValidationError{}

// Validate checks the field values on GetAvatarReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAvatarReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvatarReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAvatarReplyMultiError,
// or nil if none found.
func (m *GetAvatarReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvatarReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetAvatarReplyMultiError(errors)
	}

	return nil
}

// GetAvatarReplyMultiError is an error wrapping multiple validation errors
// returned by GetAvatarReply.ValidateAll() if the designated constraints
// aren't met.
type GetAvatarReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvatarReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvatarReplyMultiError) AllErrors() []error { return m }

// GetAvatarReplyValidationError is the validation error returned by
// GetAvatarReply.Validate if the designated constraints aren't met.
type GetAvatarReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvatarReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvatarReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvatarReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvatarReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvatarReplyValidationError) ErrorName() string { return "GetAvatarReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAvatarReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvatarReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvatarReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvatarReplyValidationError{}

// Validate checks the field values on VerifyCodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyCodeRequestMultiError, or nil if none found.
func (m *VerifyCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_VerifyCodeRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := VerifyCodeRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_VerifyCodeRequest_SmsCode_Pattern.MatchString(m.GetSmsCode()) {
		err := VerifyCodeRequestValidationError{
			field:  "SmsCode",
			reason: "value does not match regex pattern \"^[0-9]{4}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyCodeRequestMultiError(errors)
	}

	return nil
}

// VerifyCodeRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyCodeRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCodeRequestMultiError) AllErrors() []error { return m }

// VerifyCodeRequestValidationError is the validation error returned by
// VerifyCodeRequest.Validate if the designated constraints aren't met.
type VerifyCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCodeRequestValidationError) ErrorName() string {
	return "VerifyCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCodeRequestValidationError{}

var _VerifyCodeRequest_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")

var _VerifyCodeRequest_SmsCode_Pattern = regexp.MustCompile("^[0-9]{4}$")

// Validate checks the field values on VerifyCodeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyCodeReplyMultiError, or nil if none found.
func (m *VerifyCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyCodeReplyMultiError(errors)
	}

	return nil
}

// VerifyCodeReplyMultiError is an error wrapping multiple validation errors
// returned by VerifyCodeReply.ValidateAll() if the designated constraints
// aren't met.
type VerifyCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCodeReplyMultiError) AllErrors() []error { return m }

// VerifyCodeReplyValidationError is the validation error returned by
// VerifyCodeReply.Validate if the designated constraints aren't met.
type VerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCodeReplyValidationError) ErrorName() string { return "VerifyCodeReplyValidationError" }

// Error satisfies the builtin error interface
func (e VerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCodeReplyValidationError{}

// Validate checks the field values on GetProfilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfilesRequestMultiError, or nil if none found.
func (m *GetProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProfilesRequestMultiError(errors)
	}

	return nil
}

// GetProfilesRequestMultiError is an error wrapping multiple validation errors
// returned by GetProfilesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfilesRequestMultiError) AllErrors() []error { return m }

// GetProfilesRequestValidationError is the validation error returned by
// GetProfilesRequest.Validate if the designated constraints aren't met.
type GetProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfilesRequestValidationError) ErrorName() string {
	return "GetProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfilesRequestValidationError{}

// Validate checks the field values on ShortProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShortProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortProfile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShortProfileMultiError, or
// nil if none found.
func (m *ShortProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if l := utf8.RuneCountInString(m.GetNickName()); l < 1 || l > 20 {
		err := ShortProfileValidationError{
			field:  "NickName",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatar()); l < 1 || l > 255 {
		err := ShortProfileValidationError{
			field:  "Avatar",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShortProfileMultiError(errors)
	}

	return nil
}

// ShortProfileMultiError is an error wrapping multiple validation errors
// returned by ShortProfile.ValidateAll() if the designated constraints aren't met.
type ShortProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortProfileMultiError) AllErrors() []error { return m }

// ShortProfileValidationError is the validation error returned by
// ShortProfile.Validate if the designated constraints aren't met.
type ShortProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortProfileValidationError) ErrorName() string { return "ShortProfileValidationError" }

// Error satisfies the builtin error interface
func (e ShortProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortProfileValidationError{}

// Validate checks the field values on GetProfilesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfilesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfilesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfilesReplyMultiError, or nil if none found.
func (m *GetProfilesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfilesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProfilesReplyValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProfilesReplyValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProfilesReplyValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProfilesReplyMultiError(errors)
	}

	return nil
}

// GetProfilesReplyMultiError is an error wrapping multiple validation errors
// returned by GetProfilesReply.ValidateAll() if the designated constraints
// aren't met.
type GetProfilesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfilesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfilesReplyMultiError) AllErrors() []error { return m }

// GetProfilesReplyValidationError is the validation error returned by
// GetProfilesReply.Validate if the designated constraints aren't met.
type GetProfilesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfilesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfilesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfilesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfilesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfilesReplyValidationError) ErrorName() string { return "GetProfilesReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProfilesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfilesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfilesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfilesReplyValidationError{}

// Validate checks the field values on GetAddressAndDescRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressAndDescRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressAndDescRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressAndDescRequestMultiError, or nil if none found.
func (m *GetAddressAndDescRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressAndDescRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetAddressAndDescRequestMultiError(errors)
	}

	return nil
}

// GetAddressAndDescRequestMultiError is an error wrapping multiple validation
// errors returned by GetAddressAndDescRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAddressAndDescRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressAndDescRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressAndDescRequestMultiError) AllErrors() []error { return m }

// GetAddressAndDescRequestValidationError is the validation error returned by
// GetAddressAndDescRequest.Validate if the designated constraints aren't met.
type GetAddressAndDescRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressAndDescRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressAndDescRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressAndDescRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressAndDescRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressAndDescRequestValidationError) ErrorName() string {
	return "GetAddressAndDescRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressAndDescRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressAndDescRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressAndDescRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressAndDescRequestValidationError{}

// Validate checks the field values on GetAddressAndDescReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressAndDescReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressAndDescReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressAndDescReplyMultiError, or nil if none found.
func (m *GetAddressAndDescReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressAndDescReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityName

	// no validation rules for ProvinceName

	// no validation rules for Desc

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetAddressAndDescReplyMultiError(errors)
	}

	return nil
}

// GetAddressAndDescReplyMultiError is an error wrapping multiple validation
// errors returned by GetAddressAndDescReply.ValidateAll() if the designated
// constraints aren't met.
type GetAddressAndDescReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressAndDescReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressAndDescReplyMultiError) AllErrors() []error { return m }

// GetAddressAndDescReplyValidationError is the validation error returned by
// GetAddressAndDescReply.Validate if the designated constraints aren't met.
type GetAddressAndDescReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressAndDescReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressAndDescReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressAndDescReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressAndDescReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressAndDescReplyValidationError) ErrorName() string {
	return "GetAddressAndDescReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressAndDescReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressAndDescReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressAndDescReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressAndDescReplyValidationError{}
