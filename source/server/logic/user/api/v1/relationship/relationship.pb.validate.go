// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/relationship/relationship.proto

package relationship

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestRequestMultiError, or nil if none found.
func (m *SendFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequesterId

	// no validation rules for ReceiverId

	// no validation rules for NoteName

	// no validation rules for Desc

	// no validation rules for GroupName

	if len(errors) > 0 {
		return SendFriendRequestRequestMultiError(errors)
	}

	return nil
}

// SendFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SendFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestRequestMultiError) AllErrors() []error { return m }

// SendFriendRequestRequestValidationError is the validation error returned by
// SendFriendRequestRequest.Validate if the designated constraints aren't met.
type SendFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestRequestValidationError) ErrorName() string {
	return "SendFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestRequestValidationError{}

// Validate checks the field values on SendFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestResponseMultiError, or nil if none found.
func (m *SendFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFriendRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendFriendRequestResponseValidationError{
				field:  "FriendRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendFriendRequestResponseMultiError(errors)
	}

	return nil
}

// SendFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type SendFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestResponseMultiError) AllErrors() []error { return m }

// SendFriendRequestResponseValidationError is the validation error returned by
// SendFriendRequestResponse.Validate if the designated constraints aren't met.
type SendFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestResponseValidationError) ErrorName() string {
	return "SendFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestListRequestMultiError, or nil if none found.
func (m *GetFriendRequestListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetFriendRequestListRequestMultiError(errors)
	}

	return nil
}

// GetFriendRequestListRequestMultiError is an error wrapping multiple
// validation errors returned by GetFriendRequestListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFriendRequestListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestListRequestMultiError) AllErrors() []error { return m }

// GetFriendRequestListRequestValidationError is the validation error returned
// by GetFriendRequestListRequest.Validate if the designated constraints
// aren't met.
type GetFriendRequestListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestListRequestValidationError) ErrorName() string {
	return "GetFriendRequestListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestListRequestValidationError{}

// Validate checks the field values on GetFriendRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestListResponseMultiError, or nil if none found.
func (m *GetFriendRequestListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendRequestListResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendRequestListResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendRequestListResponseValidationError{
					field:  fmt.Sprintf("FriendRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetFriendRequestListResponseMultiError(errors)
	}

	return nil
}

// GetFriendRequestListResponseMultiError is an error wrapping multiple
// validation errors returned by GetFriendRequestListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFriendRequestListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestListResponseMultiError) AllErrors() []error { return m }

// GetFriendRequestListResponseValidationError is the validation error returned
// by GetFriendRequestListResponse.Validate if the designated constraints
// aren't met.
type GetFriendRequestListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestListResponseValidationError) ErrorName() string {
	return "GetFriendRequestListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestListResponseValidationError{}

// Validate checks the field values on GetFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestRequestMultiError, or nil if none found.
func (m *GetFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetFriendRequestRequestMultiError(errors)
	}

	return nil
}

// GetFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestRequestMultiError) AllErrors() []error { return m }

// GetFriendRequestRequestValidationError is the validation error returned by
// GetFriendRequestRequest.Validate if the designated constraints aren't met.
type GetFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestRequestValidationError) ErrorName() string {
	return "GetFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestRequestValidationError{}

// Validate checks the field values on GetFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestResponseMultiError, or nil if none found.
func (m *GetFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFriendRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendRequestResponseValidationError{
				field:  "FriendRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendRequestResponseMultiError(errors)
	}

	return nil
}

// GetFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestResponseMultiError) AllErrors() []error { return m }

// GetFriendRequestResponseValidationError is the validation error returned by
// GetFriendRequestResponse.Validate if the designated constraints aren't met.
type GetFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestResponseValidationError) ErrorName() string {
	return "GetFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestsRequestMultiError, or nil if none found.
func (m *GetFriendRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendRequestsRequestMultiError(errors)
	}

	return nil
}

// GetFriendRequestsRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestsRequestMultiError) AllErrors() []error { return m }

// GetFriendRequestsRequestValidationError is the validation error returned by
// GetFriendRequestsRequest.Validate if the designated constraints aren't met.
type GetFriendRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestsRequestValidationError) ErrorName() string {
	return "GetFriendRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestsRequestValidationError{}

// Validate checks the field values on GetFriendRequestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestsResponseMultiError, or nil if none found.
func (m *GetFriendRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendRequestsResponseValidationError{
					field:  fmt.Sprintf("FriendRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendRequestsResponseMultiError(errors)
	}

	return nil
}

// GetFriendRequestsResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetFriendRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestsResponseMultiError) AllErrors() []error { return m }

// GetFriendRequestsResponseValidationError is the validation error returned by
// GetFriendRequestsResponse.Validate if the designated constraints aren't met.
type GetFriendRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestsResponseValidationError) ErrorName() string {
	return "GetFriendRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestsResponseValidationError{}

// Validate checks the field values on DealFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealFriendRequestRequestMultiError, or nil if none found.
func (m *DealFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DealFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for Status

	if len(errors) > 0 {
		return DealFriendRequestRequestMultiError(errors)
	}

	return nil
}

// DealFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by DealFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type DealFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealFriendRequestRequestMultiError) AllErrors() []error { return m }

// DealFriendRequestRequestValidationError is the validation error returned by
// DealFriendRequestRequest.Validate if the designated constraints aren't met.
type DealFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealFriendRequestRequestValidationError) ErrorName() string {
	return "DealFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DealFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealFriendRequestRequestValidationError{}

// Validate checks the field values on DealFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealFriendRequestResponseMultiError, or nil if none found.
func (m *DealFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DealFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DealFriendRequestResponseMultiError(errors)
	}

	return nil
}

// DealFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by DealFriendRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type DealFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealFriendRequestResponseMultiError) AllErrors() []error { return m }

// DealFriendRequestResponseValidationError is the validation error returned by
// DealFriendRequestResponse.Validate if the designated constraints aren't met.
type DealFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealFriendRequestResponseValidationError) ErrorName() string {
	return "DealFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DealFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListRequestMultiError, or nil if none found.
func (m *GetFriendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFriendListRequestMultiError(errors)
	}

	return nil
}

// GetFriendListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListRequestMultiError) AllErrors() []error { return m }

// GetFriendListRequestValidationError is the validation error returned by
// GetFriendListRequest.Validate if the designated constraints aren't met.
type GetFriendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListRequestValidationError) ErrorName() string {
	return "GetFriendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListRequestValidationError{}

// Validate checks the field values on FriendGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendGroupMultiError, or
// nil if none found.
func (m *FriendGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupName

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FriendGroupValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FriendGroupValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FriendGroupValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FriendGroupMultiError(errors)
	}

	return nil
}

// FriendGroupMultiError is an error wrapping multiple validation errors
// returned by FriendGroup.ValidateAll() if the designated constraints aren't met.
type FriendGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendGroupMultiError) AllErrors() []error { return m }

// FriendGroupValidationError is the validation error returned by
// FriendGroup.Validate if the designated constraints aren't met.
type FriendGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendGroupValidationError) ErrorName() string { return "FriendGroupValidationError" }

// Error satisfies the builtin error interface
func (e FriendGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendGroupValidationError{}

// Validate checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Friend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FriendMultiError, or nil if none found.
func (m *Friend) ValidateAll() error {
	return m.validate(true)
}

func (m *Friend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	// no validation rules for NickName

	// no validation rules for NoteName

	// no validation rules for Avatar

	if len(errors) > 0 {
		return FriendMultiError(errors)
	}

	return nil
}

// FriendMultiError is an error wrapping multiple validation errors returned by
// Friend.ValidateAll() if the designated constraints aren't met.
type FriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendMultiError) AllErrors() []error { return m }

// FriendValidationError is the validation error returned by Friend.Validate if
// the designated constraints aren't met.
type FriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendValidationError) ErrorName() string { return "FriendValidationError" }

// Error satisfies the builtin error interface
func (e FriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendValidationError{}

// Validate checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListResponseMultiError, or nil if none found.
func (m *GetFriendListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("FriendGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("FriendGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendListResponseValidationError{
					field:  fmt.Sprintf("FriendGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendListResponseMultiError(errors)
	}

	return nil
}

// GetFriendListResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListResponseMultiError) AllErrors() []error { return m }

// GetFriendListResponseValidationError is the validation error returned by
// GetFriendListResponse.Validate if the designated constraints aren't met.
type GetFriendListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListResponseValidationError) ErrorName() string {
	return "GetFriendListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListResponseValidationError{}

// Validate checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendRequestMultiError, or nil if none found.
func (m *DeleteFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FriendId

	if len(errors) > 0 {
		return DeleteFriendRequestMultiError(errors)
	}

	return nil
}

// DeleteFriendRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendRequestMultiError) AllErrors() []error { return m }

// DeleteFriendRequestValidationError is the validation error returned by
// DeleteFriendRequest.Validate if the designated constraints aren't met.
type DeleteFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendRequestValidationError) ErrorName() string {
	return "DeleteFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendRequestValidationError{}

// Validate checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendResponseMultiError, or nil if none found.
func (m *DeleteFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFriendResponseMultiError(errors)
	}

	return nil
}

// DeleteFriendResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendResponseMultiError) AllErrors() []error { return m }

// DeleteFriendResponseValidationError is the validation error returned by
// DeleteFriendResponse.Validate if the designated constraints aren't met.
type DeleteFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendResponseValidationError) ErrorName() string {
	return "DeleteFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendResponseValidationError{}

// Validate checks the field values on GetFriendInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInfoRequestMultiError, or nil if none found.
func (m *GetFriendInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	if len(errors) > 0 {
		return GetFriendInfoRequestMultiError(errors)
	}

	return nil
}

// GetFriendInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInfoRequestMultiError) AllErrors() []error { return m }

// GetFriendInfoRequestValidationError is the validation error returned by
// GetFriendInfoRequest.Validate if the designated constraints aren't met.
type GetFriendInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInfoRequestValidationError) ErrorName() string {
	return "GetFriendInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInfoRequestValidationError{}

// Validate checks the field values on GetFriendInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInfoResponseMultiError, or nil if none found.
func (m *GetFriendInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityName

	// no validation rules for ProvinceName

	// no validation rules for Desc

	if len(errors) > 0 {
		return GetFriendInfoResponseMultiError(errors)
	}

	return nil
}

// GetFriendInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInfoResponseMultiError) AllErrors() []error { return m }

// GetFriendInfoResponseValidationError is the validation error returned by
// GetFriendInfoResponse.Validate if the designated constraints aren't met.
type GetFriendInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInfoResponseValidationError) ErrorName() string {
	return "GetFriendInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInfoResponseValidationError{}

// Validate checks the field values on UpdateFriendInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendInfoRequestMultiError, or nil if none found.
func (m *UpdateFriendInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FriendId

	// no validation rules for NoteName

	// no validation rules for GroupName

	if len(errors) > 0 {
		return UpdateFriendInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateFriendInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFriendInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendInfoRequestMultiError) AllErrors() []error { return m }

// UpdateFriendInfoRequestValidationError is the validation error returned by
// UpdateFriendInfoRequest.Validate if the designated constraints aren't met.
type UpdateFriendInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendInfoRequestValidationError) ErrorName() string {
	return "UpdateFriendInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendInfoRequestValidationError{}

// Validate checks the field values on UpdateFriendInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendInfoResponseMultiError, or nil if none found.
func (m *UpdateFriendInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFriendInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateFriendInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateFriendInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendInfoResponseMultiError) AllErrors() []error { return m }

// UpdateFriendInfoResponseValidationError is the validation error returned by
// UpdateFriendInfoResponse.Validate if the designated constraints aren't met.
type UpdateFriendInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendInfoResponseValidationError) ErrorName() string {
	return "UpdateFriendInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendInfoResponseValidationError{}

// Validate checks the field values on CreateFriendGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFriendGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFriendGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFriendGroupRequestMultiError, or nil if none found.
func (m *CreateFriendGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFriendGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GroupName

	if len(errors) > 0 {
		return CreateFriendGroupRequestMultiError(errors)
	}

	return nil
}

// CreateFriendGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFriendGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFriendGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFriendGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFriendGroupRequestMultiError) AllErrors() []error { return m }

// CreateFriendGroupRequestValidationError is the validation error returned by
// CreateFriendGroupRequest.Validate if the designated constraints aren't met.
type CreateFriendGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFriendGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFriendGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFriendGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFriendGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFriendGroupRequestValidationError) ErrorName() string {
	return "CreateFriendGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFriendGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFriendGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFriendGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFriendGroupRequestValidationError{}

// Validate checks the field values on CreateFriendGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFriendGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFriendGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFriendGroupResponseMultiError, or nil if none found.
func (m *CreateFriendGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFriendGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateFriendGroupResponseMultiError(errors)
	}

	return nil
}

// CreateFriendGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFriendGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateFriendGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFriendGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFriendGroupResponseMultiError) AllErrors() []error { return m }

// CreateFriendGroupResponseValidationError is the validation error returned by
// CreateFriendGroupResponse.Validate if the designated constraints aren't met.
type CreateFriendGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFriendGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFriendGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFriendGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFriendGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFriendGroupResponseValidationError) ErrorName() string {
	return "CreateFriendGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFriendGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFriendGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFriendGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFriendGroupResponseValidationError{}

// Validate checks the field values on UpdateFriendGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendGroupRequestMultiError, or nil if none found.
func (m *UpdateFriendGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GroupName

	// no validation rules for NewGroupName

	if len(errors) > 0 {
		return UpdateFriendGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateFriendGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFriendGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendGroupRequestMultiError) AllErrors() []error { return m }

// UpdateFriendGroupRequestValidationError is the validation error returned by
// UpdateFriendGroupRequest.Validate if the designated constraints aren't met.
type UpdateFriendGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendGroupRequestValidationError) ErrorName() string {
	return "UpdateFriendGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendGroupRequestValidationError{}

// Validate checks the field values on UpdateFriendGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendGroupResponseMultiError, or nil if none found.
func (m *UpdateFriendGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFriendGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateFriendGroupResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateFriendGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendGroupResponseMultiError) AllErrors() []error { return m }

// UpdateFriendGroupResponseValidationError is the validation error returned by
// UpdateFriendGroupResponse.Validate if the designated constraints aren't met.
type UpdateFriendGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendGroupResponseValidationError) ErrorName() string {
	return "UpdateFriendGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendGroupResponseValidationError{}

// Validate checks the field values on DeleteFriendGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendGroupRequestMultiError, or nil if none found.
func (m *DeleteFriendGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GroupName

	if len(errors) > 0 {
		return DeleteFriendGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteFriendGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendGroupRequestMultiError) AllErrors() []error { return m }

// DeleteFriendGroupRequestValidationError is the validation error returned by
// DeleteFriendGroupRequest.Validate if the designated constraints aren't met.
type DeleteFriendGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendGroupRequestValidationError) ErrorName() string {
	return "DeleteFriendGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendGroupRequestValidationError{}

// Validate checks the field values on DeleteFriendGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendGroupResponseMultiError, or nil if none found.
func (m *DeleteFriendGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFriendGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteFriendGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteFriendGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendGroupResponseMultiError) AllErrors() []error { return m }

// DeleteFriendGroupResponseValidationError is the validation error returned by
// DeleteFriendGroupResponse.Validate if the designated constraints aren't met.
type DeleteFriendGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendGroupResponseValidationError) ErrorName() string {
	return "DeleteFriendGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendGroupResponseValidationError{}

// Validate checks the field values on GetFriendGroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendGroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendGroupListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendGroupListRequestMultiError, or nil if none found.
func (m *GetFriendGroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendGroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFriendGroupListRequestMultiError(errors)
	}

	return nil
}

// GetFriendGroupListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendGroupListRequest.ValidateAll() if the
// designated constraints aren't met.
type GetFriendGroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendGroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendGroupListRequestMultiError) AllErrors() []error { return m }

// GetFriendGroupListRequestValidationError is the validation error returned by
// GetFriendGroupListRequest.Validate if the designated constraints aren't met.
type GetFriendGroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendGroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendGroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendGroupListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendGroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendGroupListRequestValidationError) ErrorName() string {
	return "GetFriendGroupListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendGroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendGroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendGroupListRequestValidationError{}

// Validate checks the field values on GetFriendGroupListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendGroupListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendGroupListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendGroupListResponseMultiError, or nil if none found.
func (m *GetFriendGroupListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendGroupListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendGroupListResponseMultiError(errors)
	}

	return nil
}

// GetFriendGroupListResponseMultiError is an error wrapping multiple
// validation errors returned by GetFriendGroupListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFriendGroupListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendGroupListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendGroupListResponseMultiError) AllErrors() []error { return m }

// GetFriendGroupListResponseValidationError is the validation error returned
// by GetFriendGroupListResponse.Validate if the designated constraints aren't met.
type GetFriendGroupListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendGroupListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendGroupListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendGroupListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendGroupListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendGroupListResponseValidationError) ErrorName() string {
	return "GetFriendGroupListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendGroupListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendGroupListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendGroupListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendGroupListResponseValidationError{}
