// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"message/internal/biz"
	"message/internal/components/broker"
	"message/internal/components/endpoints"
	"message/internal/components/logger"
	"message/internal/components/mysql"
	"message/internal/components/redis"
	"message/internal/components/registry"
	"message/internal/components/uid"
	"message/internal/conf"
	"message/internal/data"
	"message/internal/server"
	"message/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logLogger log.Logger) (*kratos.App, func(), error) {
	helper := logger.NewHelper(logLogger)
	kafkaBroker := broker.NewKafkaBroker(helper, bootstrap)
	db := mysql.NewMysql(bootstrap)
	messageRepo := data.NewMessageRepoImpl(helper)
	redisRedis := redis.NewRedisClient(bootstrap, helper)
	node := uid.NewUidGenerator(bootstrap, helper)
	messageBiz := biz.NewMessageBiz(helper, kafkaBroker, db, messageRepo, bootstrap, redisRedis, node)
	messageServiceService := service.NewMessageServiceService(messageBiz, helper)
	grpcServer := server.NewGRPCServer(bootstrap, messageServiceService)
	v := endpoints.NewEndPoints(bootstrap)
	client, err := registry.NewEtcdClient(bootstrap, helper)
	if err != nil {
		return nil, nil, err
	}
	messageRegistry := registry.NewEtcdMessageRegistry(bootstrap, client)
	app := newApp(logLogger, bootstrap, grpcServer, v, messageRegistry)
	return app, func() {
	}, nil
}
