// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/message/message.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DealSingleMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealSingleMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealSingleMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealSingleMessageRequestMultiError, or nil if none found.
func (m *DealSingleMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DealSingleMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMessage() == nil {
		err := DealSingleMessageRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DealSingleMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DealSingleMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DealSingleMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DealSingleMessageRequestMultiError(errors)
	}

	return nil
}

// DealSingleMessageRequestMultiError is an error wrapping multiple validation
// errors returned by DealSingleMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type DealSingleMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealSingleMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealSingleMessageRequestMultiError) AllErrors() []error { return m }

// DealSingleMessageRequestValidationError is the validation error returned by
// DealSingleMessageRequest.Validate if the designated constraints aren't met.
type DealSingleMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealSingleMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealSingleMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealSingleMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealSingleMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealSingleMessageRequestValidationError) ErrorName() string {
	return "DealSingleMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DealSingleMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealSingleMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealSingleMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealSingleMessageRequestValidationError{}

// Validate checks the field values on DealSingleMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealSingleMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealSingleMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealSingleMessageResponseMultiError, or nil if none found.
func (m *DealSingleMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DealSingleMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DealSingleMessageResponseMultiError(errors)
	}

	return nil
}

// DealSingleMessageResponseMultiError is an error wrapping multiple validation
// errors returned by DealSingleMessageResponse.ValidateAll() if the
// designated constraints aren't met.
type DealSingleMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealSingleMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealSingleMessageResponseMultiError) AllErrors() []error { return m }

// DealSingleMessageResponseValidationError is the validation error returned by
// DealSingleMessageResponse.Validate if the designated constraints aren't met.
type DealSingleMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealSingleMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealSingleMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealSingleMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealSingleMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealSingleMessageResponseValidationError) ErrorName() string {
	return "DealSingleMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DealSingleMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealSingleMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealSingleMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealSingleMessageResponseValidationError{}

// Validate checks the field values on DealGroupMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealGroupMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealGroupMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealGroupMessageRequestMultiError, or nil if none found.
func (m *DealGroupMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DealGroupMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMessage() == nil {
		err := DealGroupMessageRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DealGroupMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DealGroupMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DealGroupMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := DealGroupMessageRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DealGroupMessageRequestMultiError(errors)
	}

	return nil
}

// DealGroupMessageRequestMultiError is an error wrapping multiple validation
// errors returned by DealGroupMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type DealGroupMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealGroupMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealGroupMessageRequestMultiError) AllErrors() []error { return m }

// DealGroupMessageRequestValidationError is the validation error returned by
// DealGroupMessageRequest.Validate if the designated constraints aren't met.
type DealGroupMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealGroupMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealGroupMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealGroupMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealGroupMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealGroupMessageRequestValidationError) ErrorName() string {
	return "DealGroupMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DealGroupMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealGroupMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealGroupMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealGroupMessageRequestValidationError{}

// Validate checks the field values on DealGroupMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealGroupMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealGroupMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealGroupMessageResponseMultiError, or nil if none found.
func (m *DealGroupMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DealGroupMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DealGroupMessageResponseMultiError(errors)
	}

	return nil
}

// DealGroupMessageResponseMultiError is an error wrapping multiple validation
// errors returned by DealGroupMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type DealGroupMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealGroupMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealGroupMessageResponseMultiError) AllErrors() []error { return m }

// DealGroupMessageResponseValidationError is the validation error returned by
// DealGroupMessageResponse.Validate if the designated constraints aren't met.
type DealGroupMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealGroupMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealGroupMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealGroupMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealGroupMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealGroupMessageResponseValidationError) ErrorName() string {
	return "DealGroupMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DealGroupMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealGroupMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealGroupMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealGroupMessageResponseValidationError{}

// Validate checks the field values on UpdateAckMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAckMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAckMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAckMessageRequestMultiError, or nil if none found.
func (m *UpdateAckMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAckMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	// no validation rules for SenderId

	// no validation rules for ReceiverId

	if len(errors) > 0 {
		return UpdateAckMessageRequestMultiError(errors)
	}

	return nil
}

// UpdateAckMessageRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAckMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAckMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAckMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAckMessageRequestMultiError) AllErrors() []error { return m }

// UpdateAckMessageRequestValidationError is the validation error returned by
// UpdateAckMessageRequest.Validate if the designated constraints aren't met.
type UpdateAckMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAckMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAckMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAckMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAckMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAckMessageRequestValidationError) ErrorName() string {
	return "UpdateAckMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAckMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAckMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAckMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAckMessageRequestValidationError{}

// Validate checks the field values on UpdateAckMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAckMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAckMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAckMessageResponseMultiError, or nil if none found.
func (m *UpdateAckMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAckMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAckMessageResponseMultiError(errors)
	}

	return nil
}

// UpdateAckMessageResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAckMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAckMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAckMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAckMessageResponseMultiError) AllErrors() []error { return m }

// UpdateAckMessageResponseValidationError is the validation error returned by
// UpdateAckMessageResponse.Validate if the designated constraints aren't met.
type UpdateAckMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAckMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAckMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAckMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAckMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAckMessageResponseValidationError) ErrorName() string {
	return "UpdateAckMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAckMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAckMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAckMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAckMessageResponseValidationError{}

// Validate checks the field values on AckMessageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AckMessageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AckMessageInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AckMessageInfoMultiError,
// or nil if none found.
func (m *AckMessageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AckMessageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	// no validation rules for SenderId

	if len(errors) > 0 {
		return AckMessageInfoMultiError(errors)
	}

	return nil
}

// AckMessageInfoMultiError is an error wrapping multiple validation errors
// returned by AckMessageInfo.ValidateAll() if the designated constraints
// aren't met.
type AckMessageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AckMessageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AckMessageInfoMultiError) AllErrors() []error { return m }

// AckMessageInfoValidationError is the validation error returned by
// AckMessageInfo.Validate if the designated constraints aren't met.
type AckMessageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckMessageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckMessageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckMessageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckMessageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckMessageInfoValidationError) ErrorName() string { return "AckMessageInfoValidationError" }

// Error satisfies the builtin error interface
func (e AckMessageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAckMessageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckMessageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckMessageInfoValidationError{}

// Validate checks the field values on UpdateAckMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAckMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAckMessagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAckMessagesRequestMultiError, or nil if none found.
func (m *UpdateAckMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAckMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReceiverId

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAckMessagesRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAckMessagesRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAckMessagesRequestValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAckMessagesRequestMultiError(errors)
	}

	return nil
}

// UpdateAckMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAckMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAckMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAckMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAckMessagesRequestMultiError) AllErrors() []error { return m }

// UpdateAckMessagesRequestValidationError is the validation error returned by
// UpdateAckMessagesRequest.Validate if the designated constraints aren't met.
type UpdateAckMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAckMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAckMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAckMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAckMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAckMessagesRequestValidationError) ErrorName() string {
	return "UpdateAckMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAckMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAckMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAckMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAckMessagesRequestValidationError{}

// Validate checks the field values on UpdateAckMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAckMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAckMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAckMessagesResponseMultiError, or nil if none found.
func (m *UpdateAckMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAckMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAckMessagesResponseMultiError(errors)
	}

	return nil
}

// UpdateAckMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAckMessagesResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateAckMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAckMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAckMessagesResponseMultiError) AllErrors() []error { return m }

// UpdateAckMessagesResponseValidationError is the validation error returned by
// UpdateAckMessagesResponse.Validate if the designated constraints aren't met.
type UpdateAckMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAckMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAckMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAckMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAckMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAckMessagesResponseValidationError) ErrorName() string {
	return "UpdateAckMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAckMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAckMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAckMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAckMessagesResponseValidationError{}

// Validate checks the field values on GetLatestUnreadMessageListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetLatestUnreadMessageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestUnreadMessageListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetLatestUnreadMessageListRequestMultiError, or nil if none found.
func (m *GetLatestUnreadMessageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestUnreadMessageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetLatestUnreadMessageListRequestMultiError(errors)
	}

	return nil
}

// GetLatestUnreadMessageListRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetLatestUnreadMessageListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLatestUnreadMessageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestUnreadMessageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestUnreadMessageListRequestMultiError) AllErrors() []error { return m }

// GetLatestUnreadMessageListRequestValidationError is the validation error
// returned by GetLatestUnreadMessageListRequest.Validate if the designated
// constraints aren't met.
type GetLatestUnreadMessageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestUnreadMessageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestUnreadMessageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestUnreadMessageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestUnreadMessageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestUnreadMessageListRequestValidationError) ErrorName() string {
	return "GetLatestUnreadMessageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestUnreadMessageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestUnreadMessageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestUnreadMessageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestUnreadMessageListRequestValidationError{}

// Validate checks the field values on GetLatestUnreadMessageListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetLatestUnreadMessageListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestUnreadMessageListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetLatestUnreadMessageListResponseMultiError, or nil if none found.
func (m *GetLatestUnreadMessageListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestUnreadMessageListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLatestUnreadMessageListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLatestUnreadMessageListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLatestUnreadMessageListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLatestUnreadMessageListResponseMultiError(errors)
	}

	return nil
}

// GetLatestUnreadMessageListResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetLatestUnreadMessageListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLatestUnreadMessageListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestUnreadMessageListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestUnreadMessageListResponseMultiError) AllErrors() []error { return m }

// GetLatestUnreadMessageListResponseValidationError is the validation error
// returned by GetLatestUnreadMessageListResponse.Validate if the designated
// constraints aren't met.
type GetLatestUnreadMessageListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestUnreadMessageListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestUnreadMessageListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestUnreadMessageListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestUnreadMessageListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestUnreadMessageListResponseValidationError) ErrorName() string {
	return "GetLatestUnreadMessageListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestUnreadMessageListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestUnreadMessageListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestUnreadMessageListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestUnreadMessageListResponseValidationError{}

// Validate checks the field values on GetUnloadMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnloadMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnloadMessagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnloadMessagesRequestMultiError, or nil if none found.
func (m *GetUnloadMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnloadMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenderId

	// no validation rules for ReceiverId

	// no validation rules for MessageId

	// no validation rules for Num

	if len(errors) > 0 {
		return GetUnloadMessagesRequestMultiError(errors)
	}

	return nil
}

// GetUnloadMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by GetUnloadMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUnloadMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnloadMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnloadMessagesRequestMultiError) AllErrors() []error { return m }

// GetUnloadMessagesRequestValidationError is the validation error returned by
// GetUnloadMessagesRequest.Validate if the designated constraints aren't met.
type GetUnloadMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnloadMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnloadMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnloadMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnloadMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnloadMessagesRequestValidationError) ErrorName() string {
	return "GetUnloadMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnloadMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnloadMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnloadMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnloadMessagesRequestValidationError{}

// Validate checks the field values on GetUnloadMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnloadMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnloadMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnloadMessagesResponseMultiError, or nil if none found.
func (m *GetUnloadMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnloadMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUnloadMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUnloadMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUnloadMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUnloadMessagesResponseMultiError(errors)
	}

	return nil
}

// GetUnloadMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by GetUnloadMessagesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetUnloadMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnloadMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnloadMessagesResponseMultiError) AllErrors() []error { return m }

// GetUnloadMessagesResponseValidationError is the validation error returned by
// GetUnloadMessagesResponse.Validate if the designated constraints aren't met.
type GetUnloadMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnloadMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnloadMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnloadMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnloadMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnloadMessagesResponseValidationError) ErrorName() string {
	return "GetUnloadMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnloadMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnloadMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnloadMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnloadMessagesResponseValidationError{}

// Validate checks the field values on GetAllMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMessageRequestMultiError, or nil if none found.
func (m *GetAllMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenderId

	// no validation rules for ReceiverId

	if len(errors) > 0 {
		return GetAllMessageRequestMultiError(errors)
	}

	return nil
}

// GetAllMessageRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMessageRequestMultiError) AllErrors() []error { return m }

// GetAllMessageRequestValidationError is the validation error returned by
// GetAllMessageRequest.Validate if the designated constraints aren't met.
type GetAllMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMessageRequestValidationError) ErrorName() string {
	return "GetAllMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMessageRequestValidationError{}

// Validate checks the field values on GetAllMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMessageResponseMultiError, or nil if none found.
func (m *GetAllMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllMessageResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllMessageResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllMessageResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllMessageResponseMultiError(errors)
	}

	return nil
}

// GetAllMessageResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMessageResponseMultiError) AllErrors() []error { return m }

// GetAllMessageResponseValidationError is the validation error returned by
// GetAllMessageResponse.Validate if the designated constraints aren't met.
type GetAllMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMessageResponseValidationError) ErrorName() string {
	return "GetAllMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMessageResponseValidationError{}

// Validate checks the field values on InitUnreadMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitUnreadMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitUnreadMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitUnreadMessageRequestMultiError, or nil if none found.
func (m *InitUnreadMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitUnreadMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for FriendId

	if len(errors) > 0 {
		return InitUnreadMessageRequestMultiError(errors)
	}

	return nil
}

// InitUnreadMessageRequestMultiError is an error wrapping multiple validation
// errors returned by InitUnreadMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type InitUnreadMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitUnreadMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitUnreadMessageRequestMultiError) AllErrors() []error { return m }

// InitUnreadMessageRequestValidationError is the validation error returned by
// InitUnreadMessageRequest.Validate if the designated constraints aren't met.
type InitUnreadMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitUnreadMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitUnreadMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitUnreadMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitUnreadMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitUnreadMessageRequestValidationError) ErrorName() string {
	return "InitUnreadMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitUnreadMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitUnreadMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitUnreadMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitUnreadMessageRequestValidationError{}

// Validate checks the field values on InitUnreadMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitUnreadMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitUnreadMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitUnreadMessageResponseMultiError, or nil if none found.
func (m *InitUnreadMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitUnreadMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitUnreadMessageResponseMultiError(errors)
	}

	return nil
}

// InitUnreadMessageResponseMultiError is an error wrapping multiple validation
// errors returned by InitUnreadMessageResponse.ValidateAll() if the
// designated constraints aren't met.
type InitUnreadMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitUnreadMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitUnreadMessageResponseMultiError) AllErrors() []error { return m }

// InitUnreadMessageResponseValidationError is the validation error returned by
// InitUnreadMessageResponse.Validate if the designated constraints aren't met.
type InitUnreadMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitUnreadMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitUnreadMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitUnreadMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitUnreadMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitUnreadMessageResponseValidationError) ErrorName() string {
	return "InitUnreadMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitUnreadMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitUnreadMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitUnreadMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitUnreadMessageResponseValidationError{}
