// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"logic/internal/data/orm/model"
)

func newEmoji(db *gorm.DB, opts ...gen.DOOption) emoji {
	_emoji := emoji{}

	_emoji.emojiDo.UseDB(db, opts...)
	_emoji.emojiDo.UseModel(&model.Emoji{})

	tableName := _emoji.emojiDo.TableName()
	_emoji.ALL = field.NewAsterisk(tableName)
	_emoji.EID = field.NewInt64(tableName, "e_id")
	_emoji.EName = field.NewString(tableName, "e_name")
	_emoji.EContent = field.NewString(tableName, "e_content")

	_emoji.fillFieldMap()

	return _emoji
}

type emoji struct {
	emojiDo emojiDo

	ALL      field.Asterisk
	EID      field.Int64
	EName    field.String
	EContent field.String

	fieldMap map[string]field.Expr
}

func (e emoji) Table(newTableName string) *emoji {
	e.emojiDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emoji) As(alias string) *emoji {
	e.emojiDo.DO = *(e.emojiDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emoji) updateTableName(table string) *emoji {
	e.ALL = field.NewAsterisk(table)
	e.EID = field.NewInt64(table, "e_id")
	e.EName = field.NewString(table, "e_name")
	e.EContent = field.NewString(table, "e_content")

	e.fillFieldMap()

	return e
}

func (e *emoji) WithContext(ctx context.Context) *emojiDo { return e.emojiDo.WithContext(ctx) }

func (e emoji) TableName() string { return e.emojiDo.TableName() }

func (e emoji) Alias() string { return e.emojiDo.Alias() }

func (e *emoji) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emoji) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["e_id"] = e.EID
	e.fieldMap["e_name"] = e.EName
	e.fieldMap["e_content"] = e.EContent
}

func (e emoji) clone(db *gorm.DB) emoji {
	e.emojiDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emoji) replaceDB(db *gorm.DB) emoji {
	e.emojiDo.ReplaceDB(db)
	return e
}

type emojiDo struct{ gen.DO }

func (e emojiDo) Debug() *emojiDo {
	return e.withDO(e.DO.Debug())
}

func (e emojiDo) WithContext(ctx context.Context) *emojiDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emojiDo) ReadDB() *emojiDo {
	return e.Clauses(dbresolver.Read)
}

func (e emojiDo) WriteDB() *emojiDo {
	return e.Clauses(dbresolver.Write)
}

func (e emojiDo) Session(config *gorm.Session) *emojiDo {
	return e.withDO(e.DO.Session(config))
}

func (e emojiDo) Clauses(conds ...clause.Expression) *emojiDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emojiDo) Returning(value interface{}, columns ...string) *emojiDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emojiDo) Not(conds ...gen.Condition) *emojiDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emojiDo) Or(conds ...gen.Condition) *emojiDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emojiDo) Select(conds ...field.Expr) *emojiDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emojiDo) Where(conds ...gen.Condition) *emojiDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emojiDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *emojiDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e emojiDo) Order(conds ...field.Expr) *emojiDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emojiDo) Distinct(cols ...field.Expr) *emojiDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emojiDo) Omit(cols ...field.Expr) *emojiDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emojiDo) Join(table schema.Tabler, on ...field.Expr) *emojiDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emojiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emojiDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emojiDo) RightJoin(table schema.Tabler, on ...field.Expr) *emojiDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emojiDo) Group(cols ...field.Expr) *emojiDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emojiDo) Having(conds ...gen.Condition) *emojiDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emojiDo) Limit(limit int) *emojiDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emojiDo) Offset(offset int) *emojiDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emojiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emojiDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emojiDo) Unscoped() *emojiDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emojiDo) Create(values ...*model.Emoji) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emojiDo) CreateInBatches(values []*model.Emoji, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emojiDo) Save(values ...*model.Emoji) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emojiDo) First() (*model.Emoji, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emoji), nil
	}
}

func (e emojiDo) Take() (*model.Emoji, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emoji), nil
	}
}

func (e emojiDo) Last() (*model.Emoji, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emoji), nil
	}
}

func (e emojiDo) Find() ([]*model.Emoji, error) {
	result, err := e.DO.Find()
	return result.([]*model.Emoji), err
}

func (e emojiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Emoji, err error) {
	buf := make([]*model.Emoji, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emojiDo) FindInBatches(result *[]*model.Emoji, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emojiDo) Attrs(attrs ...field.AssignExpr) *emojiDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emojiDo) Assign(attrs ...field.AssignExpr) *emojiDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emojiDo) Joins(fields ...field.RelationField) *emojiDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emojiDo) Preload(fields ...field.RelationField) *emojiDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emojiDo) FirstOrInit() (*model.Emoji, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emoji), nil
	}
}

func (e emojiDo) FirstOrCreate() (*model.Emoji, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emoji), nil
	}
}

func (e emojiDo) FindByPage(offset int, limit int) (result []*model.Emoji, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emojiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emojiDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emojiDo) Delete(models ...*model.Emoji) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emojiDo) withDO(do gen.Dao) *emojiDo {
	e.DO = *do.(*gen.DO)
	return e
}
