// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Ping_FullMethodName              = "/api.v1.logic.user.User/Ping"
	User_RegisterUser_FullMethodName      = "/api.v1.logic.user.User/RegisterUser"
	User_SendSmsCode_FullMethodName       = "/api.v1.logic.user.User/SendSmsCode"
	User_ModifyPasswd_FullMethodName      = "/api.v1.logic.user.User/ModifyPasswd"
	User_ResetPassword_FullMethodName     = "/api.v1.logic.user.User/ResetPassword"
	User_ModifyAccountID_FullMethodName   = "/api.v1.logic.user.User/ModifyAccountID"
	User_ModifyProfile_FullMethodName     = "/api.v1.logic.user.User/ModifyProfile"
	User_Profile_FullMethodName           = "/api.v1.logic.user.User/Profile"
	User_AddressList_FullMethodName       = "/api.v1.logic.user.User/AddressList"
	User_BindPhone_FullMethodName         = "/api.v1.logic.user.User/BindPhone"
	User_UploadAvatar_FullMethodName      = "/api.v1.logic.user.User/UploadAvatar"
	User_GetAvatar_FullMethodName         = "/api.v1.logic.user.User/GetAvatar"
	User_VerifyCode_FullMethodName        = "/api.v1.logic.user.User/VerifyCode"
	User_GetProfiles_FullMethodName       = "/api.v1.logic.user.User/GetProfiles"
	User_GetAddressAndDesc_FullMethodName = "/api.v1.logic.user.User/GetAddressAndDesc"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserReply, error)
	SendSmsCode(ctx context.Context, in *SendSmsCodeRequest, opts ...grpc.CallOption) (*SendSmsCodeReply, error)
	ModifyPasswd(ctx context.Context, in *ModifyPasswdRequest, opts ...grpc.CallOption) (*ModifyPasswdReply, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error)
	ModifyAccountID(ctx context.Context, in *ModifyAccountIDRequest, opts ...grpc.CallOption) (*ModifyAccountIDReply, error)
	ModifyProfile(ctx context.Context, in *ModifyProfileRequest, opts ...grpc.CallOption) (*ModifyProfileReply, error)
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	AddressList(ctx context.Context, in *AddressListRequest, opts ...grpc.CallOption) (*AddressListReply, error)
	BindPhone(ctx context.Context, in *BindPhoneRequest, opts ...grpc.CallOption) (*BindPhoneReply, error)
	UploadAvatar(ctx context.Context, opts ...grpc.CallOption) (User_UploadAvatarClient, error)
	GetAvatar(ctx context.Context, in *GetAvatarRequest, opts ...grpc.CallOption) (User_GetAvatarClient, error)
	VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeReply, error)
	GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesReply, error)
	GetAddressAndDesc(ctx context.Context, in *GetAddressAndDescRequest, opts ...grpc.CallOption) (*GetAddressAndDescReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, User_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserReply, error) {
	out := new(RegisterUserReply)
	err := c.cc.Invoke(ctx, User_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendSmsCode(ctx context.Context, in *SendSmsCodeRequest, opts ...grpc.CallOption) (*SendSmsCodeReply, error) {
	out := new(SendSmsCodeReply)
	err := c.cc.Invoke(ctx, User_SendSmsCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ModifyPasswd(ctx context.Context, in *ModifyPasswdRequest, opts ...grpc.CallOption) (*ModifyPasswdReply, error) {
	out := new(ModifyPasswdReply)
	err := c.cc.Invoke(ctx, User_ModifyPasswd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error) {
	out := new(ResetPasswordReply)
	err := c.cc.Invoke(ctx, User_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ModifyAccountID(ctx context.Context, in *ModifyAccountIDRequest, opts ...grpc.CallOption) (*ModifyAccountIDReply, error) {
	out := new(ModifyAccountIDReply)
	err := c.cc.Invoke(ctx, User_ModifyAccountID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ModifyProfile(ctx context.Context, in *ModifyProfileRequest, opts ...grpc.CallOption) (*ModifyProfileReply, error) {
	out := new(ModifyProfileReply)
	err := c.cc.Invoke(ctx, User_ModifyProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, User_Profile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddressList(ctx context.Context, in *AddressListRequest, opts ...grpc.CallOption) (*AddressListReply, error) {
	out := new(AddressListReply)
	err := c.cc.Invoke(ctx, User_AddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindPhone(ctx context.Context, in *BindPhoneRequest, opts ...grpc.CallOption) (*BindPhoneReply, error) {
	out := new(BindPhoneReply)
	err := c.cc.Invoke(ctx, User_BindPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UploadAvatar(ctx context.Context, opts ...grpc.CallOption) (User_UploadAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], User_UploadAvatar_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userUploadAvatarClient{stream}
	return x, nil
}

type User_UploadAvatarClient interface {
	Send(*UploadAvatarRequest) error
	CloseAndRecv() (*UploadAvatarReply, error)
	grpc.ClientStream
}

type userUploadAvatarClient struct {
	grpc.ClientStream
}

func (x *userUploadAvatarClient) Send(m *UploadAvatarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userUploadAvatarClient) CloseAndRecv() (*UploadAvatarReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadAvatarReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetAvatar(ctx context.Context, in *GetAvatarRequest, opts ...grpc.CallOption) (User_GetAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[1], User_GetAvatar_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetAvatarClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_GetAvatarClient interface {
	Recv() (*GetAvatarReply, error)
	grpc.ClientStream
}

type userGetAvatarClient struct {
	grpc.ClientStream
}

func (x *userGetAvatarClient) Recv() (*GetAvatarReply, error) {
	m := new(GetAvatarReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeReply, error) {
	out := new(VerifyCodeReply)
	err := c.cc.Invoke(ctx, User_VerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesReply, error) {
	out := new(GetProfilesReply)
	err := c.cc.Invoke(ctx, User_GetProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAddressAndDesc(ctx context.Context, in *GetAddressAndDescRequest, opts ...grpc.CallOption) (*GetAddressAndDescReply, error) {
	out := new(GetAddressAndDescReply)
	err := c.cc.Invoke(ctx, User_GetAddressAndDesc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserReply, error)
	SendSmsCode(context.Context, *SendSmsCodeRequest) (*SendSmsCodeReply, error)
	ModifyPasswd(context.Context, *ModifyPasswdRequest) (*ModifyPasswdReply, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error)
	ModifyAccountID(context.Context, *ModifyAccountIDRequest) (*ModifyAccountIDReply, error)
	ModifyProfile(context.Context, *ModifyProfileRequest) (*ModifyProfileReply, error)
	Profile(context.Context, *ProfileRequest) (*ProfileReply, error)
	AddressList(context.Context, *AddressListRequest) (*AddressListReply, error)
	BindPhone(context.Context, *BindPhoneRequest) (*BindPhoneReply, error)
	UploadAvatar(User_UploadAvatarServer) error
	GetAvatar(*GetAvatarRequest, User_GetAvatarServer) error
	VerifyCode(context.Context, *VerifyCodeRequest) (*VerifyCodeReply, error)
	GetProfiles(context.Context, *GetProfilesRequest) (*GetProfilesReply, error)
	GetAddressAndDesc(context.Context, *GetAddressAndDescRequest) (*GetAddressAndDescReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserServer) SendSmsCode(context.Context, *SendSmsCodeRequest) (*SendSmsCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmsCode not implemented")
}
func (UnimplementedUserServer) ModifyPasswd(context.Context, *ModifyPasswdRequest) (*ModifyPasswdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPasswd not implemented")
}
func (UnimplementedUserServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServer) ModifyAccountID(context.Context, *ModifyAccountIDRequest) (*ModifyAccountIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAccountID not implemented")
}
func (UnimplementedUserServer) ModifyProfile(context.Context, *ModifyProfileRequest) (*ModifyProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyProfile not implemented")
}
func (UnimplementedUserServer) Profile(context.Context, *ProfileRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedUserServer) AddressList(context.Context, *AddressListRequest) (*AddressListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressList not implemented")
}
func (UnimplementedUserServer) BindPhone(context.Context, *BindPhoneRequest) (*BindPhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPhone not implemented")
}
func (UnimplementedUserServer) UploadAvatar(User_UploadAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAvatar not implemented")
}
func (UnimplementedUserServer) GetAvatar(*GetAvatarRequest, User_GetAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAvatar not implemented")
}
func (UnimplementedUserServer) VerifyCode(context.Context, *VerifyCodeRequest) (*VerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedUserServer) GetProfiles(context.Context, *GetProfilesRequest) (*GetProfilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfiles not implemented")
}
func (UnimplementedUserServer) GetAddressAndDesc(context.Context, *GetAddressAndDescRequest) (*GetAddressAndDescReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressAndDesc not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendSmsCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendSmsCode(ctx, req.(*SendSmsCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ModifyPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPasswdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ModifyPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ModifyPasswd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ModifyPasswd(ctx, req.(*ModifyPasswdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ModifyAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ModifyAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ModifyAccountID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ModifyAccountID(ctx, req.(*ModifyAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ModifyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ModifyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ModifyProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ModifyProfile(ctx, req.(*ModifyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Profile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddressList(ctx, req.(*AddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BindPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindPhone(ctx, req.(*BindPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UploadAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).UploadAvatar(&userUploadAvatarServer{stream})
}

type User_UploadAvatarServer interface {
	SendAndClose(*UploadAvatarReply) error
	Recv() (*UploadAvatarRequest, error)
	grpc.ServerStream
}

type userUploadAvatarServer struct {
	grpc.ServerStream
}

func (x *userUploadAvatarServer) SendAndClose(m *UploadAvatarReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userUploadAvatarServer) Recv() (*UploadAvatarRequest, error) {
	m := new(UploadAvatarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_GetAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAvatarRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).GetAvatar(m, &userGetAvatarServer{stream})
}

type User_GetAvatarServer interface {
	Send(*GetAvatarReply) error
	grpc.ServerStream
}

type userGetAvatarServer struct {
	grpc.ServerStream
}

func (x *userGetAvatarServer) Send(m *GetAvatarReply) error {
	return x.ServerStream.SendMsg(m)
}

func _User_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyCode(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetProfiles(ctx, req.(*GetProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAddressAndDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressAndDescRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAddressAndDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetAddressAndDesc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAddressAndDesc(ctx, req.(*GetAddressAndDescRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.logic.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _User_Ping_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _User_RegisterUser_Handler,
		},
		{
			MethodName: "SendSmsCode",
			Handler:    _User_SendSmsCode_Handler,
		},
		{
			MethodName: "ModifyPasswd",
			Handler:    _User_ModifyPasswd_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _User_ResetPassword_Handler,
		},
		{
			MethodName: "ModifyAccountID",
			Handler:    _User_ModifyAccountID_Handler,
		},
		{
			MethodName: "ModifyProfile",
			Handler:    _User_ModifyProfile_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _User_Profile_Handler,
		},
		{
			MethodName: "AddressList",
			Handler:    _User_AddressList_Handler,
		},
		{
			MethodName: "BindPhone",
			Handler:    _User_BindPhone_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _User_VerifyCode_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _User_GetProfiles_Handler,
		},
		{
			MethodName: "GetAddressAndDesc",
			Handler:    _User_GetAddressAndDesc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAvatar",
			Handler:       _User_UploadAvatar_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAvatar",
			Handler:       _User_GetAvatar_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/user/user.proto",
}
