// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/relationship/relationship.proto

package relationship

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelationShip_SendFriendRequest_FullMethodName    = "/api.v1.logic.relationship.relationShip/SendFriendRequest"
	RelationShip_GetFriendRequestList_FullMethodName = "/api.v1.logic.relationship.relationShip/GetFriendRequestList"
	RelationShip_GetFriendRequest_FullMethodName     = "/api.v1.logic.relationship.relationShip/GetFriendRequest"
	RelationShip_GetFriendRequests_FullMethodName    = "/api.v1.logic.relationship.relationShip/GetFriendRequests"
	RelationShip_DealFriendRequest_FullMethodName    = "/api.v1.logic.relationship.relationShip/DealFriendRequest"
	RelationShip_GetFriendList_FullMethodName        = "/api.v1.logic.relationship.relationShip/GetFriendList"
	RelationShip_GetOneFriend_FullMethodName         = "/api.v1.logic.relationship.relationShip/GetOneFriend"
	RelationShip_GetFriendsByIDS_FullMethodName      = "/api.v1.logic.relationship.relationShip/GetFriendsByIDS"
	RelationShip_DeleteFriend_FullMethodName         = "/api.v1.logic.relationship.relationShip/DeleteFriend"
	RelationShip_GetFriendInfo_FullMethodName        = "/api.v1.logic.relationship.relationShip/GetFriendInfo"
	RelationShip_UpdateFriendInfo_FullMethodName     = "/api.v1.logic.relationship.relationShip/UpdateFriendInfo"
	RelationShip_CreateFriendGroup_FullMethodName    = "/api.v1.logic.relationship.relationShip/CreateFriendGroup"
	RelationShip_UpdateFriendGroup_FullMethodName    = "/api.v1.logic.relationship.relationShip/UpdateFriendGroup"
	RelationShip_DeleteFriendGroup_FullMethodName    = "/api.v1.logic.relationship.relationShip/DeleteFriendGroup"
	RelationShip_GetFriendGroupList_FullMethodName   = "/api.v1.logic.relationship.relationShip/GetFriendGroupList"
)

// RelationShipClient is the client API for RelationShip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationShipClient interface {
	SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error)
	GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListResponse, error)
	GetFriendRequest(ctx context.Context, in *GetFriendRequestRequest, opts ...grpc.CallOption) (*GetFriendRequestResponse, error)
	GetFriendRequests(ctx context.Context, in *GetFriendRequestsRequest, opts ...grpc.CallOption) (*GetFriendRequestsResponse, error)
	DealFriendRequest(ctx context.Context, in *DealFriendRequestRequest, opts ...grpc.CallOption) (*DealFriendRequestResponse, error)
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
	GetOneFriend(ctx context.Context, in *GetOneFriendRequest, opts ...grpc.CallOption) (*GetONeFriendResponse, error)
	GetFriendsByIDS(ctx context.Context, in *GetFriendsByIDSRequest, opts ...grpc.CallOption) (*GetFriendsByIDSResponse, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
	GetFriendInfo(ctx context.Context, in *GetFriendInfoRequest, opts ...grpc.CallOption) (*GetFriendInfoResponse, error)
	UpdateFriendInfo(ctx context.Context, in *UpdateFriendInfoRequest, opts ...grpc.CallOption) (*UpdateFriendInfoResponse, error)
	CreateFriendGroup(ctx context.Context, in *CreateFriendGroupRequest, opts ...grpc.CallOption) (*CreateFriendGroupResponse, error)
	UpdateFriendGroup(ctx context.Context, in *UpdateFriendGroupRequest, opts ...grpc.CallOption) (*UpdateFriendGroupResponse, error)
	DeleteFriendGroup(ctx context.Context, in *DeleteFriendGroupRequest, opts ...grpc.CallOption) (*DeleteFriendGroupResponse, error)
	GetFriendGroupList(ctx context.Context, in *GetFriendGroupListRequest, opts ...grpc.CallOption) (*GetFriendGroupListResponse, error)
}

type relationShipClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationShipClient(cc grpc.ClientConnInterface) RelationShipClient {
	return &relationShipClient{cc}
}

func (c *relationShipClient) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error) {
	out := new(SendFriendRequestResponse)
	err := c.cc.Invoke(ctx, RelationShip_SendFriendRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListResponse, error) {
	out := new(GetFriendRequestListResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetFriendRequestList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetFriendRequest(ctx context.Context, in *GetFriendRequestRequest, opts ...grpc.CallOption) (*GetFriendRequestResponse, error) {
	out := new(GetFriendRequestResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetFriendRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetFriendRequests(ctx context.Context, in *GetFriendRequestsRequest, opts ...grpc.CallOption) (*GetFriendRequestsResponse, error) {
	out := new(GetFriendRequestsResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetFriendRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) DealFriendRequest(ctx context.Context, in *DealFriendRequestRequest, opts ...grpc.CallOption) (*DealFriendRequestResponse, error) {
	out := new(DealFriendRequestResponse)
	err := c.cc.Invoke(ctx, RelationShip_DealFriendRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetFriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetOneFriend(ctx context.Context, in *GetOneFriendRequest, opts ...grpc.CallOption) (*GetONeFriendResponse, error) {
	out := new(GetONeFriendResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetOneFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetFriendsByIDS(ctx context.Context, in *GetFriendsByIDSRequest, opts ...grpc.CallOption) (*GetFriendsByIDSResponse, error) {
	out := new(GetFriendsByIDSResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetFriendsByIDS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	out := new(DeleteFriendResponse)
	err := c.cc.Invoke(ctx, RelationShip_DeleteFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetFriendInfo(ctx context.Context, in *GetFriendInfoRequest, opts ...grpc.CallOption) (*GetFriendInfoResponse, error) {
	out := new(GetFriendInfoResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetFriendInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) UpdateFriendInfo(ctx context.Context, in *UpdateFriendInfoRequest, opts ...grpc.CallOption) (*UpdateFriendInfoResponse, error) {
	out := new(UpdateFriendInfoResponse)
	err := c.cc.Invoke(ctx, RelationShip_UpdateFriendInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) CreateFriendGroup(ctx context.Context, in *CreateFriendGroupRequest, opts ...grpc.CallOption) (*CreateFriendGroupResponse, error) {
	out := new(CreateFriendGroupResponse)
	err := c.cc.Invoke(ctx, RelationShip_CreateFriendGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) UpdateFriendGroup(ctx context.Context, in *UpdateFriendGroupRequest, opts ...grpc.CallOption) (*UpdateFriendGroupResponse, error) {
	out := new(UpdateFriendGroupResponse)
	err := c.cc.Invoke(ctx, RelationShip_UpdateFriendGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) DeleteFriendGroup(ctx context.Context, in *DeleteFriendGroupRequest, opts ...grpc.CallOption) (*DeleteFriendGroupResponse, error) {
	out := new(DeleteFriendGroupResponse)
	err := c.cc.Invoke(ctx, RelationShip_DeleteFriendGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationShipClient) GetFriendGroupList(ctx context.Context, in *GetFriendGroupListRequest, opts ...grpc.CallOption) (*GetFriendGroupListResponse, error) {
	out := new(GetFriendGroupListResponse)
	err := c.cc.Invoke(ctx, RelationShip_GetFriendGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationShipServer is the server API for RelationShip service.
// All implementations must embed UnimplementedRelationShipServer
// for forward compatibility
type RelationShipServer interface {
	SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error)
	GetFriendRequestList(context.Context, *GetFriendRequestListRequest) (*GetFriendRequestListResponse, error)
	GetFriendRequest(context.Context, *GetFriendRequestRequest) (*GetFriendRequestResponse, error)
	GetFriendRequests(context.Context, *GetFriendRequestsRequest) (*GetFriendRequestsResponse, error)
	DealFriendRequest(context.Context, *DealFriendRequestRequest) (*DealFriendRequestResponse, error)
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	GetOneFriend(context.Context, *GetOneFriendRequest) (*GetONeFriendResponse, error)
	GetFriendsByIDS(context.Context, *GetFriendsByIDSRequest) (*GetFriendsByIDSResponse, error)
	DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error)
	GetFriendInfo(context.Context, *GetFriendInfoRequest) (*GetFriendInfoResponse, error)
	UpdateFriendInfo(context.Context, *UpdateFriendInfoRequest) (*UpdateFriendInfoResponse, error)
	CreateFriendGroup(context.Context, *CreateFriendGroupRequest) (*CreateFriendGroupResponse, error)
	UpdateFriendGroup(context.Context, *UpdateFriendGroupRequest) (*UpdateFriendGroupResponse, error)
	DeleteFriendGroup(context.Context, *DeleteFriendGroupRequest) (*DeleteFriendGroupResponse, error)
	GetFriendGroupList(context.Context, *GetFriendGroupListRequest) (*GetFriendGroupListResponse, error)
	mustEmbedUnimplementedRelationShipServer()
}

// UnimplementedRelationShipServer must be embedded to have forward compatible implementations.
type UnimplementedRelationShipServer struct {
}

func (UnimplementedRelationShipServer) SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedRelationShipServer) GetFriendRequestList(context.Context, *GetFriendRequestListRequest) (*GetFriendRequestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequestList not implemented")
}
func (UnimplementedRelationShipServer) GetFriendRequest(context.Context, *GetFriendRequestRequest) (*GetFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequest not implemented")
}
func (UnimplementedRelationShipServer) GetFriendRequests(context.Context, *GetFriendRequestsRequest) (*GetFriendRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequests not implemented")
}
func (UnimplementedRelationShipServer) DealFriendRequest(context.Context, *DealFriendRequestRequest) (*DealFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealFriendRequest not implemented")
}
func (UnimplementedRelationShipServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedRelationShipServer) GetOneFriend(context.Context, *GetOneFriendRequest) (*GetONeFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneFriend not implemented")
}
func (UnimplementedRelationShipServer) GetFriendsByIDS(context.Context, *GetFriendsByIDSRequest) (*GetFriendsByIDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsByIDS not implemented")
}
func (UnimplementedRelationShipServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedRelationShipServer) GetFriendInfo(context.Context, *GetFriendInfoRequest) (*GetFriendInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendInfo not implemented")
}
func (UnimplementedRelationShipServer) UpdateFriendInfo(context.Context, *UpdateFriendInfoRequest) (*UpdateFriendInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendInfo not implemented")
}
func (UnimplementedRelationShipServer) CreateFriendGroup(context.Context, *CreateFriendGroupRequest) (*CreateFriendGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendGroup not implemented")
}
func (UnimplementedRelationShipServer) UpdateFriendGroup(context.Context, *UpdateFriendGroupRequest) (*UpdateFriendGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendGroup not implemented")
}
func (UnimplementedRelationShipServer) DeleteFriendGroup(context.Context, *DeleteFriendGroupRequest) (*DeleteFriendGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendGroup not implemented")
}
func (UnimplementedRelationShipServer) GetFriendGroupList(context.Context, *GetFriendGroupListRequest) (*GetFriendGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendGroupList not implemented")
}
func (UnimplementedRelationShipServer) mustEmbedUnimplementedRelationShipServer() {}

// UnsafeRelationShipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationShipServer will
// result in compilation errors.
type UnsafeRelationShipServer interface {
	mustEmbedUnimplementedRelationShipServer()
}

func RegisterRelationShipServer(s grpc.ServiceRegistrar, srv RelationShipServer) {
	s.RegisterService(&RelationShip_ServiceDesc, srv)
}

func _RelationShip_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_SendFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).SendFriendRequest(ctx, req.(*SendFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetFriendRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetFriendRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetFriendRequestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetFriendRequestList(ctx, req.(*GetFriendRequestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetFriendRequest(ctx, req.(*GetFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetFriendRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetFriendRequests(ctx, req.(*GetFriendRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_DealFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).DealFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_DealFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).DealFriendRequest(ctx, req.(*DealFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetOneFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetOneFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetOneFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetOneFriend(ctx, req.(*GetOneFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetFriendsByIDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsByIDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetFriendsByIDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetFriendsByIDS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetFriendsByIDS(ctx, req.(*GetFriendsByIDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetFriendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetFriendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetFriendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetFriendInfo(ctx, req.(*GetFriendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_UpdateFriendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).UpdateFriendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_UpdateFriendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).UpdateFriendInfo(ctx, req.(*UpdateFriendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_CreateFriendGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).CreateFriendGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_CreateFriendGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).CreateFriendGroup(ctx, req.(*CreateFriendGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_UpdateFriendGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).UpdateFriendGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_UpdateFriendGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).UpdateFriendGroup(ctx, req.(*UpdateFriendGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_DeleteFriendGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).DeleteFriendGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_DeleteFriendGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).DeleteFriendGroup(ctx, req.(*DeleteFriendGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationShip_GetFriendGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationShipServer).GetFriendGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationShip_GetFriendGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationShipServer).GetFriendGroupList(ctx, req.(*GetFriendGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationShip_ServiceDesc is the grpc.ServiceDesc for RelationShip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationShip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.logic.relationship.relationShip",
	HandlerType: (*RelationShipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFriendRequest",
			Handler:    _RelationShip_SendFriendRequest_Handler,
		},
		{
			MethodName: "GetFriendRequestList",
			Handler:    _RelationShip_GetFriendRequestList_Handler,
		},
		{
			MethodName: "GetFriendRequest",
			Handler:    _RelationShip_GetFriendRequest_Handler,
		},
		{
			MethodName: "GetFriendRequests",
			Handler:    _RelationShip_GetFriendRequests_Handler,
		},
		{
			MethodName: "DealFriendRequest",
			Handler:    _RelationShip_DealFriendRequest_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _RelationShip_GetFriendList_Handler,
		},
		{
			MethodName: "GetOneFriend",
			Handler:    _RelationShip_GetOneFriend_Handler,
		},
		{
			MethodName: "GetFriendsByIDS",
			Handler:    _RelationShip_GetFriendsByIDS_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _RelationShip_DeleteFriend_Handler,
		},
		{
			MethodName: "GetFriendInfo",
			Handler:    _RelationShip_GetFriendInfo_Handler,
		},
		{
			MethodName: "UpdateFriendInfo",
			Handler:    _RelationShip_UpdateFriendInfo_Handler,
		},
		{
			MethodName: "CreateFriendGroup",
			Handler:    _RelationShip_CreateFriendGroup_Handler,
		},
		{
			MethodName: "UpdateFriendGroup",
			Handler:    _RelationShip_UpdateFriendGroup_Handler,
		},
		{
			MethodName: "DeleteFriendGroup",
			Handler:    _RelationShip_DeleteFriendGroup_Handler,
		},
		{
			MethodName: "GetFriendGroupList",
			Handler:    _RelationShip_GetFriendGroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/relationship/relationship.proto",
}
