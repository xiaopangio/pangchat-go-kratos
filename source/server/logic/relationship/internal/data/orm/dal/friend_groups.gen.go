// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"relationship/internal/data/orm/model"
)

func newFriendGroup(db *gorm.DB, opts ...gen.DOOption) friendGroup {
	_friendGroup := friendGroup{}

	_friendGroup.friendGroupDo.UseDB(db, opts...)
	_friendGroup.friendGroupDo.UseModel(&model.FriendGroup{})

	tableName := _friendGroup.friendGroupDo.TableName()
	_friendGroup.ALL = field.NewAsterisk(tableName)
	_friendGroup.UserID = field.NewInt64(tableName, "user_id")
	_friendGroup.GroupName = field.NewString(tableName, "group_name")

	_friendGroup.fillFieldMap()

	return _friendGroup
}

type friendGroup struct {
	friendGroupDo friendGroupDo

	ALL       field.Asterisk
	UserID    field.Int64  // 用户id
	GroupName field.String // 好友分组名称

	fieldMap map[string]field.Expr
}

func (f friendGroup) Table(newTableName string) *friendGroup {
	f.friendGroupDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendGroup) As(alias string) *friendGroup {
	f.friendGroupDo.DO = *(f.friendGroupDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendGroup) updateTableName(table string) *friendGroup {
	f.ALL = field.NewAsterisk(table)
	f.UserID = field.NewInt64(table, "user_id")
	f.GroupName = field.NewString(table, "group_name")

	f.fillFieldMap()

	return f
}

func (f *friendGroup) WithContext(ctx context.Context) *friendGroupDo {
	return f.friendGroupDo.WithContext(ctx)
}

func (f friendGroup) TableName() string { return f.friendGroupDo.TableName() }

func (f friendGroup) Alias() string { return f.friendGroupDo.Alias() }

func (f *friendGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendGroup) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 2)
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["group_name"] = f.GroupName
}

func (f friendGroup) clone(db *gorm.DB) friendGroup {
	f.friendGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendGroup) replaceDB(db *gorm.DB) friendGroup {
	f.friendGroupDo.ReplaceDB(db)
	return f
}

type friendGroupDo struct{ gen.DO }

func (f friendGroupDo) Debug() *friendGroupDo {
	return f.withDO(f.DO.Debug())
}

func (f friendGroupDo) WithContext(ctx context.Context) *friendGroupDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendGroupDo) ReadDB() *friendGroupDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendGroupDo) WriteDB() *friendGroupDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendGroupDo) Session(config *gorm.Session) *friendGroupDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendGroupDo) Clauses(conds ...clause.Expression) *friendGroupDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendGroupDo) Returning(value interface{}, columns ...string) *friendGroupDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendGroupDo) Not(conds ...gen.Condition) *friendGroupDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendGroupDo) Or(conds ...gen.Condition) *friendGroupDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendGroupDo) Select(conds ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendGroupDo) Where(conds ...gen.Condition) *friendGroupDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *friendGroupDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f friendGroupDo) Order(conds ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendGroupDo) Distinct(cols ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendGroupDo) Omit(cols ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendGroupDo) Join(table schema.Tabler, on ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendGroupDo) Group(cols ...field.Expr) *friendGroupDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendGroupDo) Having(conds ...gen.Condition) *friendGroupDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendGroupDo) Limit(limit int) *friendGroupDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendGroupDo) Offset(offset int) *friendGroupDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *friendGroupDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendGroupDo) Unscoped() *friendGroupDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendGroupDo) Create(values ...*model.FriendGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendGroupDo) CreateInBatches(values []*model.FriendGroup, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendGroupDo) Save(values ...*model.FriendGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendGroupDo) First() (*model.FriendGroup, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendGroup), nil
	}
}

func (f friendGroupDo) Take() (*model.FriendGroup, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendGroup), nil
	}
}

func (f friendGroupDo) Last() (*model.FriendGroup, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendGroup), nil
	}
}

func (f friendGroupDo) Find() ([]*model.FriendGroup, error) {
	result, err := f.DO.Find()
	return result.([]*model.FriendGroup), err
}

func (f friendGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendGroup, err error) {
	buf := make([]*model.FriendGroup, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendGroupDo) FindInBatches(result *[]*model.FriendGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendGroupDo) Attrs(attrs ...field.AssignExpr) *friendGroupDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendGroupDo) Assign(attrs ...field.AssignExpr) *friendGroupDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendGroupDo) Joins(fields ...field.RelationField) *friendGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendGroupDo) Preload(fields ...field.RelationField) *friendGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendGroupDo) FirstOrInit() (*model.FriendGroup, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendGroup), nil
	}
}

func (f friendGroupDo) FirstOrCreate() (*model.FriendGroup, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendGroup), nil
	}
}

func (f friendGroupDo) FindByPage(offset int, limit int) (result []*model.FriendGroup, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendGroupDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendGroupDo) Delete(models ...*model.FriendGroup) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendGroupDo) withDO(do gen.Dao) *friendGroupDo {
	f.DO = *do.(*gen.DO)
	return f
}
