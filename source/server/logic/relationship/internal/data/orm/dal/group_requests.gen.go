// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"relationship/internal/data/orm/model"
)

func newGroupRequest(db *gorm.DB, opts ...gen.DOOption) groupRequest {
	_groupRequest := groupRequest{}

	_groupRequest.groupRequestDo.UseDB(db, opts...)
	_groupRequest.groupRequestDo.UseModel(&model.GroupRequest{})

	tableName := _groupRequest.groupRequestDo.TableName()
	_groupRequest.ALL = field.NewAsterisk(tableName)
	_groupRequest.RequestID = field.NewInt64(tableName, "request_id")
	_groupRequest.RequesterID = field.NewInt64(tableName, "requester_id")
	_groupRequest.GroupID = field.NewString(tableName, "group_id")
	_groupRequest.Desc = field.NewString(tableName, "desc")
	_groupRequest.Status = field.NewString(tableName, "status")
	_groupRequest.CreateAt = field.NewTime(tableName, "create_at")
	_groupRequest.UpdateAt = field.NewTime(tableName, "update_at")

	_groupRequest.fillFieldMap()

	return _groupRequest
}

type groupRequest struct {
	groupRequestDo groupRequestDo

	ALL         field.Asterisk
	RequestID   field.Int64  // 群申请id
	RequesterID field.Int64  // 申请者id
	GroupID     field.String // 群聊id
	Desc        field.String // 申请说明
	Status      field.String // 请求状态 // 0:未处理 1:已同意 2:已拒绝
	CreateAt    field.Time   // 请求创建时间
	UpdateAt    field.Time   // 请求处理时间

	fieldMap map[string]field.Expr
}

func (g groupRequest) Table(newTableName string) *groupRequest {
	g.groupRequestDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupRequest) As(alias string) *groupRequest {
	g.groupRequestDo.DO = *(g.groupRequestDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupRequest) updateTableName(table string) *groupRequest {
	g.ALL = field.NewAsterisk(table)
	g.RequestID = field.NewInt64(table, "request_id")
	g.RequesterID = field.NewInt64(table, "requester_id")
	g.GroupID = field.NewString(table, "group_id")
	g.Desc = field.NewString(table, "desc")
	g.Status = field.NewString(table, "status")
	g.CreateAt = field.NewTime(table, "create_at")
	g.UpdateAt = field.NewTime(table, "update_at")

	g.fillFieldMap()

	return g
}

func (g *groupRequest) WithContext(ctx context.Context) *groupRequestDo {
	return g.groupRequestDo.WithContext(ctx)
}

func (g groupRequest) TableName() string { return g.groupRequestDo.TableName() }

func (g groupRequest) Alias() string { return g.groupRequestDo.Alias() }

func (g *groupRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupRequest) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["request_id"] = g.RequestID
	g.fieldMap["requester_id"] = g.RequesterID
	g.fieldMap["group_id"] = g.GroupID
	g.fieldMap["desc"] = g.Desc
	g.fieldMap["status"] = g.Status
	g.fieldMap["create_at"] = g.CreateAt
	g.fieldMap["update_at"] = g.UpdateAt
}

func (g groupRequest) clone(db *gorm.DB) groupRequest {
	g.groupRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupRequest) replaceDB(db *gorm.DB) groupRequest {
	g.groupRequestDo.ReplaceDB(db)
	return g
}

type groupRequestDo struct{ gen.DO }

func (g groupRequestDo) Debug() *groupRequestDo {
	return g.withDO(g.DO.Debug())
}

func (g groupRequestDo) WithContext(ctx context.Context) *groupRequestDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupRequestDo) ReadDB() *groupRequestDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupRequestDo) WriteDB() *groupRequestDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupRequestDo) Session(config *gorm.Session) *groupRequestDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupRequestDo) Clauses(conds ...clause.Expression) *groupRequestDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupRequestDo) Returning(value interface{}, columns ...string) *groupRequestDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupRequestDo) Not(conds ...gen.Condition) *groupRequestDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupRequestDo) Or(conds ...gen.Condition) *groupRequestDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupRequestDo) Select(conds ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupRequestDo) Where(conds ...gen.Condition) *groupRequestDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupRequestDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *groupRequestDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g groupRequestDo) Order(conds ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupRequestDo) Distinct(cols ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupRequestDo) Omit(cols ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupRequestDo) Join(table schema.Tabler, on ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupRequestDo) Group(cols ...field.Expr) *groupRequestDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupRequestDo) Having(conds ...gen.Condition) *groupRequestDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupRequestDo) Limit(limit int) *groupRequestDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupRequestDo) Offset(offset int) *groupRequestDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *groupRequestDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupRequestDo) Unscoped() *groupRequestDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupRequestDo) Create(values ...*model.GroupRequest) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupRequestDo) CreateInBatches(values []*model.GroupRequest, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupRequestDo) Save(values ...*model.GroupRequest) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupRequestDo) First() (*model.GroupRequest, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) Take() (*model.GroupRequest, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) Last() (*model.GroupRequest, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) Find() ([]*model.GroupRequest, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupRequest), err
}

func (g groupRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupRequest, err error) {
	buf := make([]*model.GroupRequest, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupRequestDo) FindInBatches(result *[]*model.GroupRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupRequestDo) Attrs(attrs ...field.AssignExpr) *groupRequestDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupRequestDo) Assign(attrs ...field.AssignExpr) *groupRequestDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupRequestDo) Joins(fields ...field.RelationField) *groupRequestDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupRequestDo) Preload(fields ...field.RelationField) *groupRequestDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupRequestDo) FirstOrInit() (*model.GroupRequest, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) FirstOrCreate() (*model.GroupRequest, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) FindByPage(offset int, limit int) (result []*model.GroupRequest, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupRequestDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupRequestDo) Delete(models ...*model.GroupRequest) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupRequestDo) withDO(do gen.Dao) *groupRequestDo {
	g.DO = *do.(*gen.DO)
	return g
}
