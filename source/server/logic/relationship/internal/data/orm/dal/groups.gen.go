// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"relationship/internal/data/orm/model"
)

func newGroup(db *gorm.DB, opts ...gen.DOOption) group {
	_group := group{}

	_group.groupDo.UseDB(db, opts...)
	_group.groupDo.UseModel(&model.Group{})

	tableName := _group.groupDo.TableName()
	_group.ALL = field.NewAsterisk(tableName)
	_group.GroupID = field.NewString(tableName, "group_id")
	_group.GroupName = field.NewString(tableName, "group_name")
	_group.GroupAvatar = field.NewString(tableName, "group_avatar")
	_group.GourpDesc = field.NewString(tableName, "gourp_desc")
	_group.CreateAt = field.NewTime(tableName, "create_at")
	_group.GroupLeaderID = field.NewInt64(tableName, "group_leader_id")
	_group.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_group.fillFieldMap()

	return _group
}

type group struct {
	groupDo groupDo

	ALL           field.Asterisk
	GroupID       field.String // 群唯一标识、群号：10-13位
	GroupName     field.String // 群名称
	GroupAvatar   field.String // 群头像地址
	GourpDesc     field.String // 群介绍
	CreateAt      field.Time   // 群创建时间
	GroupLeaderID field.Int64  // 群主id
	IsDeleted     field.Int32  // 是否删除，0表示未删除，1表示已删除

	fieldMap map[string]field.Expr
}

func (g group) Table(newTableName string) *group {
	g.groupDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g group) As(alias string) *group {
	g.groupDo.DO = *(g.groupDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *group) updateTableName(table string) *group {
	g.ALL = field.NewAsterisk(table)
	g.GroupID = field.NewString(table, "group_id")
	g.GroupName = field.NewString(table, "group_name")
	g.GroupAvatar = field.NewString(table, "group_avatar")
	g.GourpDesc = field.NewString(table, "gourp_desc")
	g.CreateAt = field.NewTime(table, "create_at")
	g.GroupLeaderID = field.NewInt64(table, "group_leader_id")
	g.IsDeleted = field.NewInt32(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *group) WithContext(ctx context.Context) *groupDo { return g.groupDo.WithContext(ctx) }

func (g group) TableName() string { return g.groupDo.TableName() }

func (g group) Alias() string { return g.groupDo.Alias() }

func (g *group) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *group) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["group_id"] = g.GroupID
	g.fieldMap["group_name"] = g.GroupName
	g.fieldMap["group_avatar"] = g.GroupAvatar
	g.fieldMap["gourp_desc"] = g.GourpDesc
	g.fieldMap["create_at"] = g.CreateAt
	g.fieldMap["group_leader_id"] = g.GroupLeaderID
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g group) clone(db *gorm.DB) group {
	g.groupDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g group) replaceDB(db *gorm.DB) group {
	g.groupDo.ReplaceDB(db)
	return g
}

type groupDo struct{ gen.DO }

func (g groupDo) Debug() *groupDo {
	return g.withDO(g.DO.Debug())
}

func (g groupDo) WithContext(ctx context.Context) *groupDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupDo) ReadDB() *groupDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupDo) WriteDB() *groupDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupDo) Session(config *gorm.Session) *groupDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupDo) Clauses(conds ...clause.Expression) *groupDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupDo) Returning(value interface{}, columns ...string) *groupDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupDo) Not(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupDo) Or(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupDo) Select(conds ...field.Expr) *groupDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupDo) Where(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *groupDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g groupDo) Order(conds ...field.Expr) *groupDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupDo) Distinct(cols ...field.Expr) *groupDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupDo) Omit(cols ...field.Expr) *groupDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupDo) Join(table schema.Tabler, on ...field.Expr) *groupDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *groupDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupDo) RightJoin(table schema.Tabler, on ...field.Expr) *groupDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupDo) Group(cols ...field.Expr) *groupDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupDo) Having(conds ...gen.Condition) *groupDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupDo) Limit(limit int) *groupDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupDo) Offset(offset int) *groupDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *groupDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupDo) Unscoped() *groupDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupDo) Create(values ...*model.Group) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupDo) CreateInBatches(values []*model.Group, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupDo) Save(values ...*model.Group) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupDo) First() (*model.Group, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Group), nil
	}
}

func (g groupDo) Take() (*model.Group, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Group), nil
	}
}

func (g groupDo) Last() (*model.Group, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Group), nil
	}
}

func (g groupDo) Find() ([]*model.Group, error) {
	result, err := g.DO.Find()
	return result.([]*model.Group), err
}

func (g groupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Group, err error) {
	buf := make([]*model.Group, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupDo) FindInBatches(result *[]*model.Group, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupDo) Attrs(attrs ...field.AssignExpr) *groupDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupDo) Assign(attrs ...field.AssignExpr) *groupDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupDo) Joins(fields ...field.RelationField) *groupDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupDo) Preload(fields ...field.RelationField) *groupDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupDo) FirstOrInit() (*model.Group, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Group), nil
	}
}

func (g groupDo) FirstOrCreate() (*model.Group, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Group), nil
	}
}

func (g groupDo) FindByPage(offset int, limit int) (result []*model.Group, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupDo) Delete(models ...*model.Group) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupDo) withDO(do gen.Dao) *groupDo {
	g.DO = *do.(*gen.DO)
	return g
}
