// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Friend        *friend
	FriendGroup   *friendGroup
	FriendRequest *friendRequest
	Group         *group
	GroupAdmin    *groupAdmin
	GroupMember   *groupMember
	GroupRequest  *groupRequest
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Friend = &Q.Friend
	FriendGroup = &Q.FriendGroup
	FriendRequest = &Q.FriendRequest
	Group = &Q.Group
	GroupAdmin = &Q.GroupAdmin
	GroupMember = &Q.GroupMember
	GroupRequest = &Q.GroupRequest
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Friend:        newFriend(db, opts...),
		FriendGroup:   newFriendGroup(db, opts...),
		FriendRequest: newFriendRequest(db, opts...),
		Group:         newGroup(db, opts...),
		GroupAdmin:    newGroupAdmin(db, opts...),
		GroupMember:   newGroupMember(db, opts...),
		GroupRequest:  newGroupRequest(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Friend        friend
	FriendGroup   friendGroup
	FriendRequest friendRequest
	Group         group
	GroupAdmin    groupAdmin
	GroupMember   groupMember
	GroupRequest  groupRequest
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Friend:        q.Friend.clone(db),
		FriendGroup:   q.FriendGroup.clone(db),
		FriendRequest: q.FriendRequest.clone(db),
		Group:         q.Group.clone(db),
		GroupAdmin:    q.GroupAdmin.clone(db),
		GroupMember:   q.GroupMember.clone(db),
		GroupRequest:  q.GroupRequest.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Friend:        q.Friend.replaceDB(db),
		FriendGroup:   q.FriendGroup.replaceDB(db),
		FriendRequest: q.FriendRequest.replaceDB(db),
		Group:         q.Group.replaceDB(db),
		GroupAdmin:    q.GroupAdmin.replaceDB(db),
		GroupMember:   q.GroupMember.replaceDB(db),
		GroupRequest:  q.GroupRequest.replaceDB(db),
	}
}

type queryCtx struct {
	Friend        *friendDo
	FriendGroup   *friendGroupDo
	FriendRequest *friendRequestDo
	Group         *groupDo
	GroupAdmin    *groupAdminDo
	GroupMember   *groupMemberDo
	GroupRequest  *groupRequestDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Friend:        q.Friend.WithContext(ctx),
		FriendGroup:   q.FriendGroup.WithContext(ctx),
		FriendRequest: q.FriendRequest.WithContext(ctx),
		Group:         q.Group.WithContext(ctx),
		GroupAdmin:    q.GroupAdmin.WithContext(ctx),
		GroupMember:   q.GroupMember.WithContext(ctx),
		GroupRequest:  q.GroupRequest.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
