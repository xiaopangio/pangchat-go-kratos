// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"relationship/internal/data/orm/model"
)

func newGroupAdmin(db *gorm.DB, opts ...gen.DOOption) groupAdmin {
	_groupAdmin := groupAdmin{}

	_groupAdmin.groupAdminDo.UseDB(db, opts...)
	_groupAdmin.groupAdminDo.UseModel(&model.GroupAdmin{})

	tableName := _groupAdmin.groupAdminDo.TableName()
	_groupAdmin.ALL = field.NewAsterisk(tableName)
	_groupAdmin.GroupID = field.NewString(tableName, "group_id")
	_groupAdmin.AdministratorID = field.NewInt64(tableName, "administrator_id")
	_groupAdmin.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_groupAdmin.fillFieldMap()

	return _groupAdmin
}

type groupAdmin struct {
	groupAdminDo groupAdminDo

	ALL             field.Asterisk
	GroupID         field.String // 群id
	AdministratorID field.Int64  // 管理员id
	IsDeleted       field.Int32  // 是否删除 0：未删除，1已删除

	fieldMap map[string]field.Expr
}

func (g groupAdmin) Table(newTableName string) *groupAdmin {
	g.groupAdminDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupAdmin) As(alias string) *groupAdmin {
	g.groupAdminDo.DO = *(g.groupAdminDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupAdmin) updateTableName(table string) *groupAdmin {
	g.ALL = field.NewAsterisk(table)
	g.GroupID = field.NewString(table, "group_id")
	g.AdministratorID = field.NewInt64(table, "administrator_id")
	g.IsDeleted = field.NewInt32(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *groupAdmin) WithContext(ctx context.Context) *groupAdminDo {
	return g.groupAdminDo.WithContext(ctx)
}

func (g groupAdmin) TableName() string { return g.groupAdminDo.TableName() }

func (g groupAdmin) Alias() string { return g.groupAdminDo.Alias() }

func (g *groupAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupAdmin) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 3)
	g.fieldMap["group_id"] = g.GroupID
	g.fieldMap["administrator_id"] = g.AdministratorID
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g groupAdmin) clone(db *gorm.DB) groupAdmin {
	g.groupAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupAdmin) replaceDB(db *gorm.DB) groupAdmin {
	g.groupAdminDo.ReplaceDB(db)
	return g
}

type groupAdminDo struct{ gen.DO }

func (g groupAdminDo) Debug() *groupAdminDo {
	return g.withDO(g.DO.Debug())
}

func (g groupAdminDo) WithContext(ctx context.Context) *groupAdminDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupAdminDo) ReadDB() *groupAdminDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupAdminDo) WriteDB() *groupAdminDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupAdminDo) Session(config *gorm.Session) *groupAdminDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupAdminDo) Clauses(conds ...clause.Expression) *groupAdminDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupAdminDo) Returning(value interface{}, columns ...string) *groupAdminDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupAdminDo) Not(conds ...gen.Condition) *groupAdminDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupAdminDo) Or(conds ...gen.Condition) *groupAdminDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupAdminDo) Select(conds ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupAdminDo) Where(conds ...gen.Condition) *groupAdminDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupAdminDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *groupAdminDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g groupAdminDo) Order(conds ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupAdminDo) Distinct(cols ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupAdminDo) Omit(cols ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupAdminDo) Join(table schema.Tabler, on ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupAdminDo) Group(cols ...field.Expr) *groupAdminDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupAdminDo) Having(conds ...gen.Condition) *groupAdminDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupAdminDo) Limit(limit int) *groupAdminDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupAdminDo) Offset(offset int) *groupAdminDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *groupAdminDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupAdminDo) Unscoped() *groupAdminDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupAdminDo) Create(values ...*model.GroupAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupAdminDo) CreateInBatches(values []*model.GroupAdmin, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupAdminDo) Save(values ...*model.GroupAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupAdminDo) First() (*model.GroupAdmin, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupAdmin), nil
	}
}

func (g groupAdminDo) Take() (*model.GroupAdmin, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupAdmin), nil
	}
}

func (g groupAdminDo) Last() (*model.GroupAdmin, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupAdmin), nil
	}
}

func (g groupAdminDo) Find() ([]*model.GroupAdmin, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupAdmin), err
}

func (g groupAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupAdmin, err error) {
	buf := make([]*model.GroupAdmin, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupAdminDo) FindInBatches(result *[]*model.GroupAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupAdminDo) Attrs(attrs ...field.AssignExpr) *groupAdminDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupAdminDo) Assign(attrs ...field.AssignExpr) *groupAdminDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupAdminDo) Joins(fields ...field.RelationField) *groupAdminDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupAdminDo) Preload(fields ...field.RelationField) *groupAdminDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupAdminDo) FirstOrInit() (*model.GroupAdmin, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupAdmin), nil
	}
}

func (g groupAdminDo) FirstOrCreate() (*model.GroupAdmin, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupAdmin), nil
	}
}

func (g groupAdminDo) FindByPage(offset int, limit int) (result []*model.GroupAdmin, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupAdminDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupAdminDo) Delete(models ...*model.GroupAdmin) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupAdminDo) withDO(do gen.Dao) *groupAdminDo {
	g.DO = *do.(*gen.DO)
	return g
}
