// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"relationship/internal/biz"
	"relationship/internal/components/broker"
	"relationship/internal/components/client"
	"relationship/internal/components/endpoints"
	"relationship/internal/components/logger"
	"relationship/internal/components/mysql"
	"relationship/internal/components/registry"
	"relationship/internal/components/uid"
	"relationship/internal/conf"
	"relationship/internal/data"
	"relationship/internal/server"
	"relationship/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logLogger log.Logger) (*kratos.App, func(), error) {
	helper := logger.NewHelper(logLogger)
	clientv3Client, err := registry.NewEtcdClient(bootstrap, helper)
	if err != nil {
		return nil, nil, err
	}
	userRegistry := registry.NewEtcdUserRegistry(bootstrap, clientv3Client)
	userClient, err := client.NewUserClient(userRegistry, helper, bootstrap)
	if err != nil {
		return nil, nil, err
	}
	messageRegistry := registry.NewEtcdMessageRegistry(bootstrap, clientv3Client)
	messageServiceClient, err := client.NewMessageClient(messageRegistry, helper, bootstrap)
	if err != nil {
		return nil, nil, err
	}
	kafkaBroker := broker.NewKafkaBroker(helper, bootstrap)
	node := uid.NewUidGenerator(bootstrap, helper)
	relationshipRepo := data.NewRelationshipRepoImpl(helper, node)
	db := mysql.NewMysql(bootstrap)
	relationshipBiz := biz.NewRelationshipBiz(helper, userClient, messageServiceClient, kafkaBroker, bootstrap, relationshipRepo, db)
	relationShipService := service.NewRelationShipService(relationshipBiz, helper)
	grpcServer := server.NewGRPCServer(bootstrap, logLogger, relationShipService)
	v := endpoints.NewEndPoints(bootstrap)
	relationshipRegistry := registry.NewEtcdRelationshipRegistry(bootstrap, clientv3Client)
	app := newApp(logLogger, bootstrap, grpcServer, v, relationshipRegistry)
	return app, func() {
	}, nil
}
