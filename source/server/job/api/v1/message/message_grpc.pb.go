// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_DealSingleMessage_FullMethodName          = "/api.v1.logic.message.MessageService/DealSingleMessage"
	MessageService_DealGroupMessage_FullMethodName           = "/api.v1.logic.message.MessageService/DealGroupMessage"
	MessageService_UpdateAckMessage_FullMethodName           = "/api.v1.logic.message.MessageService/UpdateAckMessage"
	MessageService_UpdateAckMessages_FullMethodName          = "/api.v1.logic.message.MessageService/UpdateAckMessages"
	MessageService_GetLatestUnreadMessageList_FullMethodName = "/api.v1.logic.message.MessageService/GetLatestUnreadMessageList"
	MessageService_GetUnloadMessages_FullMethodName          = "/api.v1.logic.message.MessageService/GetUnloadMessages"
	MessageService_GetAllMessages_FullMethodName             = "/api.v1.logic.message.MessageService/GetAllMessages"
	MessageService_InitUnreadMessage_FullMethodName          = "/api.v1.logic.message.MessageService/InitUnreadMessage"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	DealSingleMessage(ctx context.Context, in *DealSingleMessageRequest, opts ...grpc.CallOption) (*DealSingleMessageResponse, error)
	DealGroupMessage(ctx context.Context, in *DealGroupMessageRequest, opts ...grpc.CallOption) (*DealGroupMessageResponse, error)
	UpdateAckMessage(ctx context.Context, in *UpdateAckMessageRequest, opts ...grpc.CallOption) (*UpdateAckMessageResponse, error)
	UpdateAckMessages(ctx context.Context, in *UpdateAckMessagesRequest, opts ...grpc.CallOption) (*UpdateAckMessagesResponse, error)
	GetLatestUnreadMessageList(ctx context.Context, in *GetLatestUnreadMessageListRequest, opts ...grpc.CallOption) (*GetLatestUnreadMessageListResponse, error)
	GetUnloadMessages(ctx context.Context, in *GetUnloadMessagesRequest, opts ...grpc.CallOption) (*GetUnloadMessagesResponse, error)
	GetAllMessages(ctx context.Context, in *GetAllMessageRequest, opts ...grpc.CallOption) (*GetAllMessageResponse, error)
	InitUnreadMessage(ctx context.Context, in *InitUnreadMessageRequest, opts ...grpc.CallOption) (*InitUnreadMessageResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) DealSingleMessage(ctx context.Context, in *DealSingleMessageRequest, opts ...grpc.CallOption) (*DealSingleMessageResponse, error) {
	out := new(DealSingleMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_DealSingleMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DealGroupMessage(ctx context.Context, in *DealGroupMessageRequest, opts ...grpc.CallOption) (*DealGroupMessageResponse, error) {
	out := new(DealGroupMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_DealGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateAckMessage(ctx context.Context, in *UpdateAckMessageRequest, opts ...grpc.CallOption) (*UpdateAckMessageResponse, error) {
	out := new(UpdateAckMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_UpdateAckMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateAckMessages(ctx context.Context, in *UpdateAckMessagesRequest, opts ...grpc.CallOption) (*UpdateAckMessagesResponse, error) {
	out := new(UpdateAckMessagesResponse)
	err := c.cc.Invoke(ctx, MessageService_UpdateAckMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetLatestUnreadMessageList(ctx context.Context, in *GetLatestUnreadMessageListRequest, opts ...grpc.CallOption) (*GetLatestUnreadMessageListResponse, error) {
	out := new(GetLatestUnreadMessageListResponse)
	err := c.cc.Invoke(ctx, MessageService_GetLatestUnreadMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetUnloadMessages(ctx context.Context, in *GetUnloadMessagesRequest, opts ...grpc.CallOption) (*GetUnloadMessagesResponse, error) {
	out := new(GetUnloadMessagesResponse)
	err := c.cc.Invoke(ctx, MessageService_GetUnloadMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAllMessages(ctx context.Context, in *GetAllMessageRequest, opts ...grpc.CallOption) (*GetAllMessageResponse, error) {
	out := new(GetAllMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_GetAllMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) InitUnreadMessage(ctx context.Context, in *InitUnreadMessageRequest, opts ...grpc.CallOption) (*InitUnreadMessageResponse, error) {
	out := new(InitUnreadMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_InitUnreadMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	DealSingleMessage(context.Context, *DealSingleMessageRequest) (*DealSingleMessageResponse, error)
	DealGroupMessage(context.Context, *DealGroupMessageRequest) (*DealGroupMessageResponse, error)
	UpdateAckMessage(context.Context, *UpdateAckMessageRequest) (*UpdateAckMessageResponse, error)
	UpdateAckMessages(context.Context, *UpdateAckMessagesRequest) (*UpdateAckMessagesResponse, error)
	GetLatestUnreadMessageList(context.Context, *GetLatestUnreadMessageListRequest) (*GetLatestUnreadMessageListResponse, error)
	GetUnloadMessages(context.Context, *GetUnloadMessagesRequest) (*GetUnloadMessagesResponse, error)
	GetAllMessages(context.Context, *GetAllMessageRequest) (*GetAllMessageResponse, error)
	InitUnreadMessage(context.Context, *InitUnreadMessageRequest) (*InitUnreadMessageResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) DealSingleMessage(context.Context, *DealSingleMessageRequest) (*DealSingleMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealSingleMessage not implemented")
}
func (UnimplementedMessageServiceServer) DealGroupMessage(context.Context, *DealGroupMessageRequest) (*DealGroupMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealGroupMessage not implemented")
}
func (UnimplementedMessageServiceServer) UpdateAckMessage(context.Context, *UpdateAckMessageRequest) (*UpdateAckMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAckMessage not implemented")
}
func (UnimplementedMessageServiceServer) UpdateAckMessages(context.Context, *UpdateAckMessagesRequest) (*UpdateAckMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAckMessages not implemented")
}
func (UnimplementedMessageServiceServer) GetLatestUnreadMessageList(context.Context, *GetLatestUnreadMessageListRequest) (*GetLatestUnreadMessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestUnreadMessageList not implemented")
}
func (UnimplementedMessageServiceServer) GetUnloadMessages(context.Context, *GetUnloadMessagesRequest) (*GetUnloadMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnloadMessages not implemented")
}
func (UnimplementedMessageServiceServer) GetAllMessages(context.Context, *GetAllMessageRequest) (*GetAllMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMessages not implemented")
}
func (UnimplementedMessageServiceServer) InitUnreadMessage(context.Context, *InitUnreadMessageRequest) (*InitUnreadMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUnreadMessage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_DealSingleMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealSingleMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DealSingleMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_DealSingleMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DealSingleMessage(ctx, req.(*DealSingleMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DealGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DealGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_DealGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DealGroupMessage(ctx, req.(*DealGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateAckMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAckMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateAckMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UpdateAckMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateAckMessage(ctx, req.(*UpdateAckMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateAckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAckMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateAckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UpdateAckMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateAckMessages(ctx, req.(*UpdateAckMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetLatestUnreadMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestUnreadMessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetLatestUnreadMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetLatestUnreadMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetLatestUnreadMessageList(ctx, req.(*GetLatestUnreadMessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetUnloadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnloadMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetUnloadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetUnloadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetUnloadMessages(ctx, req.(*GetUnloadMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetAllMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAllMessages(ctx, req.(*GetAllMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_InitUnreadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitUnreadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).InitUnreadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_InitUnreadMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).InitUnreadMessage(ctx, req.(*InitUnreadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.logic.message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DealSingleMessage",
			Handler:    _MessageService_DealSingleMessage_Handler,
		},
		{
			MethodName: "DealGroupMessage",
			Handler:    _MessageService_DealGroupMessage_Handler,
		},
		{
			MethodName: "UpdateAckMessage",
			Handler:    _MessageService_UpdateAckMessage_Handler,
		},
		{
			MethodName: "UpdateAckMessages",
			Handler:    _MessageService_UpdateAckMessages_Handler,
		},
		{
			MethodName: "GetLatestUnreadMessageList",
			Handler:    _MessageService_GetLatestUnreadMessageList_Handler,
		},
		{
			MethodName: "GetUnloadMessages",
			Handler:    _MessageService_GetUnloadMessages_Handler,
		},
		{
			MethodName: "GetAllMessages",
			Handler:    _MessageService_GetAllMessages_Handler,
		},
		{
			MethodName: "InitUnreadMessage",
			Handler:    _MessageService_InitUnreadMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/message/message.proto",
}
