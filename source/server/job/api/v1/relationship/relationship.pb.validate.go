// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/relationship/relationship.proto

package relationship

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetFriendsByIDSRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsByIDSRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsByIDSRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsByIDSRequestMultiError, or nil if none found.
func (m *GetFriendsByIDSRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsByIDSRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendsByIDSRequestMultiError(errors)
	}

	return nil
}

// GetFriendsByIDSRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendsByIDSRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendsByIDSRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsByIDSRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsByIDSRequestMultiError) AllErrors() []error { return m }

// GetFriendsByIDSRequestValidationError is the validation error returned by
// GetFriendsByIDSRequest.Validate if the designated constraints aren't met.
type GetFriendsByIDSRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsByIDSRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsByIDSRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsByIDSRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsByIDSRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsByIDSRequestValidationError) ErrorName() string {
	return "GetFriendsByIDSRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsByIDSRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsByIDSRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsByIDSRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsByIDSRequestValidationError{}

// Validate checks the field values on GetFriendsByIDSResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsByIDSResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsByIDSResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsByIDSResponseMultiError, or nil if none found.
func (m *GetFriendsByIDSResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsByIDSResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendsByIDSResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendsByIDSResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendsByIDSResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendsByIDSResponseMultiError(errors)
	}

	return nil
}

// GetFriendsByIDSResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendsByIDSResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendsByIDSResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsByIDSResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsByIDSResponseMultiError) AllErrors() []error { return m }

// GetFriendsByIDSResponseValidationError is the validation error returned by
// GetFriendsByIDSResponse.Validate if the designated constraints aren't met.
type GetFriendsByIDSResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsByIDSResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsByIDSResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsByIDSResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsByIDSResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsByIDSResponseValidationError) ErrorName() string {
	return "GetFriendsByIDSResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsByIDSResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsByIDSResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsByIDSResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsByIDSResponseValidationError{}

// Validate checks the field values on GetOneFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOneFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOneFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOneFriendRequestMultiError, or nil if none found.
func (m *GetOneFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOneFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FriendId

	if len(errors) > 0 {
		return GetOneFriendRequestMultiError(errors)
	}

	return nil
}

// GetOneFriendRequestMultiError is an error wrapping multiple validation
// errors returned by GetOneFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOneFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOneFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOneFriendRequestMultiError) AllErrors() []error { return m }

// GetOneFriendRequestValidationError is the validation error returned by
// GetOneFriendRequest.Validate if the designated constraints aren't met.
type GetOneFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOneFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOneFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOneFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOneFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOneFriendRequestValidationError) ErrorName() string {
	return "GetOneFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOneFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOneFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOneFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOneFriendRequestValidationError{}

// Validate checks the field values on GetONeFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetONeFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetONeFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetONeFriendResponseMultiError, or nil if none found.
func (m *GetONeFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetONeFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFriend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetONeFriendResponseValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetONeFriendResponseValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetONeFriendResponseValidationError{
				field:  "Friend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetONeFriendResponseMultiError(errors)
	}

	return nil
}

// GetONeFriendResponseMultiError is an error wrapping multiple validation
// errors returned by GetONeFriendResponse.ValidateAll() if the designated
// constraints aren't met.
type GetONeFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetONeFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetONeFriendResponseMultiError) AllErrors() []error { return m }

// GetONeFriendResponseValidationError is the validation error returned by
// GetONeFriendResponse.Validate if the designated constraints aren't met.
type GetONeFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetONeFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetONeFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetONeFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetONeFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetONeFriendResponseValidationError) ErrorName() string {
	return "GetONeFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetONeFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetONeFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetONeFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetONeFriendResponseValidationError{}

// Validate checks the field values on SendFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestRequestMultiError, or nil if none found.
func (m *SendFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequesterId

	// no validation rules for ReceiverId

	if l := utf8.RuneCountInString(m.GetNoteName()); l < 1 || l > 10 {
		err := SendFriendRequestRequestValidationError{
			field:  "NoteName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 50 {
		err := SendFriendRequestRequestValidationError{
			field:  "Desc",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := SendFriendRequestRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendFriendRequestRequestMultiError(errors)
	}

	return nil
}

// SendFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SendFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestRequestMultiError) AllErrors() []error { return m }

// SendFriendRequestRequestValidationError is the validation error returned by
// SendFriendRequestRequest.Validate if the designated constraints aren't met.
type SendFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestRequestValidationError) ErrorName() string {
	return "SendFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestRequestValidationError{}

// Validate checks the field values on SendFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestResponseMultiError, or nil if none found.
func (m *SendFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFriendRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendFriendRequestResponseValidationError{
				field:  "FriendRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendFriendRequestResponseMultiError(errors)
	}

	return nil
}

// SendFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type SendFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestResponseMultiError) AllErrors() []error { return m }

// SendFriendRequestResponseValidationError is the validation error returned by
// SendFriendRequestResponse.Validate if the designated constraints aren't met.
type SendFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestResponseValidationError) ErrorName() string {
	return "SendFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestListRequestMultiError, or nil if none found.
func (m *GetFriendRequestListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.GetPageNumber() <= 0 {
		err := GetFriendRequestListRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() >= 100 {
		err := GetFriendRequestListRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFriendRequestListRequestMultiError(errors)
	}

	return nil
}

// GetFriendRequestListRequestMultiError is an error wrapping multiple
// validation errors returned by GetFriendRequestListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFriendRequestListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestListRequestMultiError) AllErrors() []error { return m }

// GetFriendRequestListRequestValidationError is the validation error returned
// by GetFriendRequestListRequest.Validate if the designated constraints
// aren't met.
type GetFriendRequestListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestListRequestValidationError) ErrorName() string {
	return "GetFriendRequestListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestListRequestValidationError{}

// Validate checks the field values on GetFriendRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestListResponseMultiError, or nil if none found.
func (m *GetFriendRequestListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendRequestListResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendRequestListResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendRequestListResponseValidationError{
					field:  fmt.Sprintf("FriendRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetFriendRequestListResponseMultiError(errors)
	}

	return nil
}

// GetFriendRequestListResponseMultiError is an error wrapping multiple
// validation errors returned by GetFriendRequestListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFriendRequestListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestListResponseMultiError) AllErrors() []error { return m }

// GetFriendRequestListResponseValidationError is the validation error returned
// by GetFriendRequestListResponse.Validate if the designated constraints
// aren't met.
type GetFriendRequestListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestListResponseValidationError) ErrorName() string {
	return "GetFriendRequestListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestListResponseValidationError{}

// Validate checks the field values on GetFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestRequestMultiError, or nil if none found.
func (m *GetFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetFriendRequestRequestMultiError(errors)
	}

	return nil
}

// GetFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestRequestMultiError) AllErrors() []error { return m }

// GetFriendRequestRequestValidationError is the validation error returned by
// GetFriendRequestRequest.Validate if the designated constraints aren't met.
type GetFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestRequestValidationError) ErrorName() string {
	return "GetFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestRequestValidationError{}

// Validate checks the field values on GetFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestResponseMultiError, or nil if none found.
func (m *GetFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFriendRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendRequestResponseValidationError{
				field:  "FriendRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendRequestResponseMultiError(errors)
	}

	return nil
}

// GetFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestResponseMultiError) AllErrors() []error { return m }

// GetFriendRequestResponseValidationError is the validation error returned by
// GetFriendRequestResponse.Validate if the designated constraints aren't met.
type GetFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestResponseValidationError) ErrorName() string {
	return "GetFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestsRequestMultiError, or nil if none found.
func (m *GetFriendRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendRequestsRequestMultiError(errors)
	}

	return nil
}

// GetFriendRequestsRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestsRequestMultiError) AllErrors() []error { return m }

// GetFriendRequestsRequestValidationError is the validation error returned by
// GetFriendRequestsRequest.Validate if the designated constraints aren't met.
type GetFriendRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestsRequestValidationError) ErrorName() string {
	return "GetFriendRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestsRequestValidationError{}

// Validate checks the field values on GetFriendRequestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestsResponseMultiError, or nil if none found.
func (m *GetFriendRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendRequestsResponseValidationError{
					field:  fmt.Sprintf("FriendRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendRequestsResponseMultiError(errors)
	}

	return nil
}

// GetFriendRequestsResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetFriendRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestsResponseMultiError) AllErrors() []error { return m }

// GetFriendRequestsResponseValidationError is the validation error returned by
// GetFriendRequestsResponse.Validate if the designated constraints aren't met.
type GetFriendRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestsResponseValidationError) ErrorName() string {
	return "GetFriendRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestsResponseValidationError{}

// Validate checks the field values on DealFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealFriendRequestRequestMultiError, or nil if none found.
func (m *DealFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DealFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if _, ok := _DealFriendRequestRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := DealFriendRequestRequestValidationError{
			field:  "Status",
			reason: "value must be in list [1,2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNoteName()); l < 1 || l > 10 {
		err := DealFriendRequestRequestValidationError{
			field:  "NoteName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := DealFriendRequestRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DealFriendRequestRequestMultiError(errors)
	}

	return nil
}

// DealFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by DealFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type DealFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealFriendRequestRequestMultiError) AllErrors() []error { return m }

// DealFriendRequestRequestValidationError is the validation error returned by
// DealFriendRequestRequest.Validate if the designated constraints aren't met.
type DealFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealFriendRequestRequestValidationError) ErrorName() string {
	return "DealFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DealFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealFriendRequestRequestValidationError{}

var _DealFriendRequestRequest_Status_InLookup = map[string]struct{}{
	"1,2": {},
}

// Validate checks the field values on DealFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealFriendRequestResponseMultiError, or nil if none found.
func (m *DealFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DealFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DealFriendRequestResponseMultiError(errors)
	}

	return nil
}

// DealFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by DealFriendRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type DealFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealFriendRequestResponseMultiError) AllErrors() []error { return m }

// DealFriendRequestResponseValidationError is the validation error returned by
// DealFriendRequestResponse.Validate if the designated constraints aren't met.
type DealFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealFriendRequestResponseValidationError) ErrorName() string {
	return "DealFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DealFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListRequestMultiError, or nil if none found.
func (m *GetFriendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFriendListRequestMultiError(errors)
	}

	return nil
}

// GetFriendListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListRequestMultiError) AllErrors() []error { return m }

// GetFriendListRequestValidationError is the validation error returned by
// GetFriendListRequest.Validate if the designated constraints aren't met.
type GetFriendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListRequestValidationError) ErrorName() string {
	return "GetFriendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListRequestValidationError{}

// Validate checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListResponseMultiError, or nil if none found.
func (m *GetFriendListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendListResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendListResponseMultiError(errors)
	}

	return nil
}

// GetFriendListResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListResponseMultiError) AllErrors() []error { return m }

// GetFriendListResponseValidationError is the validation error returned by
// GetFriendListResponse.Validate if the designated constraints aren't met.
type GetFriendListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListResponseValidationError) ErrorName() string {
	return "GetFriendListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListResponseValidationError{}

// Validate checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendRequestMultiError, or nil if none found.
func (m *DeleteFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FriendId

	if len(errors) > 0 {
		return DeleteFriendRequestMultiError(errors)
	}

	return nil
}

// DeleteFriendRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendRequestMultiError) AllErrors() []error { return m }

// DeleteFriendRequestValidationError is the validation error returned by
// DeleteFriendRequest.Validate if the designated constraints aren't met.
type DeleteFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendRequestValidationError) ErrorName() string {
	return "DeleteFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendRequestValidationError{}

// Validate checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendResponseMultiError, or nil if none found.
func (m *DeleteFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFriendResponseMultiError(errors)
	}

	return nil
}

// DeleteFriendResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendResponseMultiError) AllErrors() []error { return m }

// DeleteFriendResponseValidationError is the validation error returned by
// DeleteFriendResponse.Validate if the designated constraints aren't met.
type DeleteFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendResponseValidationError) ErrorName() string {
	return "DeleteFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendResponseValidationError{}

// Validate checks the field values on GetFriendInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInfoRequestMultiError, or nil if none found.
func (m *GetFriendInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	if len(errors) > 0 {
		return GetFriendInfoRequestMultiError(errors)
	}

	return nil
}

// GetFriendInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInfoRequestMultiError) AllErrors() []error { return m }

// GetFriendInfoRequestValidationError is the validation error returned by
// GetFriendInfoRequest.Validate if the designated constraints aren't met.
type GetFriendInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInfoRequestValidationError) ErrorName() string {
	return "GetFriendInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInfoRequestValidationError{}

// Validate checks the field values on GetFriendInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInfoResponseMultiError, or nil if none found.
func (m *GetFriendInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityName

	// no validation rules for ProvinceName

	// no validation rules for Desc

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetFriendInfoResponseMultiError(errors)
	}

	return nil
}

// GetFriendInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInfoResponseMultiError) AllErrors() []error { return m }

// GetFriendInfoResponseValidationError is the validation error returned by
// GetFriendInfoResponse.Validate if the designated constraints aren't met.
type GetFriendInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInfoResponseValidationError) ErrorName() string {
	return "GetFriendInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInfoResponseValidationError{}

// Validate checks the field values on UpdateFriendInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendInfoRequestMultiError, or nil if none found.
func (m *UpdateFriendInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FriendId

	if l := utf8.RuneCountInString(m.GetNoteName()); l < 1 || l > 10 {
		err := UpdateFriendInfoRequestValidationError{
			field:  "NoteName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := UpdateFriendInfoRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateFriendInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateFriendInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFriendInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendInfoRequestMultiError) AllErrors() []error { return m }

// UpdateFriendInfoRequestValidationError is the validation error returned by
// UpdateFriendInfoRequest.Validate if the designated constraints aren't met.
type UpdateFriendInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendInfoRequestValidationError) ErrorName() string {
	return "UpdateFriendInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendInfoRequestValidationError{}

// Validate checks the field values on UpdateFriendInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendInfoResponseMultiError, or nil if none found.
func (m *UpdateFriendInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFriendInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateFriendInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateFriendInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendInfoResponseMultiError) AllErrors() []error { return m }

// UpdateFriendInfoResponseValidationError is the validation error returned by
// UpdateFriendInfoResponse.Validate if the designated constraints aren't met.
type UpdateFriendInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendInfoResponseValidationError) ErrorName() string {
	return "UpdateFriendInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendInfoResponseValidationError{}

// Validate checks the field values on CreateFriendGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFriendGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFriendGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFriendGroupRequestMultiError, or nil if none found.
func (m *CreateFriendGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFriendGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := CreateFriendGroupRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateFriendGroupRequestMultiError(errors)
	}

	return nil
}

// CreateFriendGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFriendGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFriendGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFriendGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFriendGroupRequestMultiError) AllErrors() []error { return m }

// CreateFriendGroupRequestValidationError is the validation error returned by
// CreateFriendGroupRequest.Validate if the designated constraints aren't met.
type CreateFriendGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFriendGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFriendGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFriendGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFriendGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFriendGroupRequestValidationError) ErrorName() string {
	return "CreateFriendGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFriendGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFriendGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFriendGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFriendGroupRequestValidationError{}

// Validate checks the field values on CreateFriendGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFriendGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFriendGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFriendGroupResponseMultiError, or nil if none found.
func (m *CreateFriendGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFriendGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateFriendGroupResponseMultiError(errors)
	}

	return nil
}

// CreateFriendGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFriendGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateFriendGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFriendGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFriendGroupResponseMultiError) AllErrors() []error { return m }

// CreateFriendGroupResponseValidationError is the validation error returned by
// CreateFriendGroupResponse.Validate if the designated constraints aren't met.
type CreateFriendGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFriendGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFriendGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFriendGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFriendGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFriendGroupResponseValidationError) ErrorName() string {
	return "CreateFriendGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFriendGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFriendGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFriendGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFriendGroupResponseValidationError{}

// Validate checks the field values on UpdateFriendGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendGroupRequestMultiError, or nil if none found.
func (m *UpdateFriendGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := UpdateFriendGroupRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewGroupName()); l < 1 || l > 10 {
		err := UpdateFriendGroupRequestValidationError{
			field:  "NewGroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateFriendGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateFriendGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFriendGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendGroupRequestMultiError) AllErrors() []error { return m }

// UpdateFriendGroupRequestValidationError is the validation error returned by
// UpdateFriendGroupRequest.Validate if the designated constraints aren't met.
type UpdateFriendGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendGroupRequestValidationError) ErrorName() string {
	return "UpdateFriendGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendGroupRequestValidationError{}

// Validate checks the field values on UpdateFriendGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendGroupResponseMultiError, or nil if none found.
func (m *UpdateFriendGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFriendGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateFriendGroupResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateFriendGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendGroupResponseMultiError) AllErrors() []error { return m }

// UpdateFriendGroupResponseValidationError is the validation error returned by
// UpdateFriendGroupResponse.Validate if the designated constraints aren't met.
type UpdateFriendGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendGroupResponseValidationError) ErrorName() string {
	return "UpdateFriendGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendGroupResponseValidationError{}

// Validate checks the field values on DeleteFriendGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendGroupRequestMultiError, or nil if none found.
func (m *DeleteFriendGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := DeleteFriendGroupRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFriendGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteFriendGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendGroupRequestMultiError) AllErrors() []error { return m }

// DeleteFriendGroupRequestValidationError is the validation error returned by
// DeleteFriendGroupRequest.Validate if the designated constraints aren't met.
type DeleteFriendGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendGroupRequestValidationError) ErrorName() string {
	return "DeleteFriendGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendGroupRequestValidationError{}

// Validate checks the field values on DeleteFriendGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendGroupResponseMultiError, or nil if none found.
func (m *DeleteFriendGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFriendGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteFriendGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteFriendGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendGroupResponseMultiError) AllErrors() []error { return m }

// DeleteFriendGroupResponseValidationError is the validation error returned by
// DeleteFriendGroupResponse.Validate if the designated constraints aren't met.
type DeleteFriendGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendGroupResponseValidationError) ErrorName() string {
	return "DeleteFriendGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendGroupResponseValidationError{}

// Validate checks the field values on GetFriendGroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendGroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendGroupListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendGroupListRequestMultiError, or nil if none found.
func (m *GetFriendGroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendGroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFriendGroupListRequestMultiError(errors)
	}

	return nil
}

// GetFriendGroupListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendGroupListRequest.ValidateAll() if the
// designated constraints aren't met.
type GetFriendGroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendGroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendGroupListRequestMultiError) AllErrors() []error { return m }

// GetFriendGroupListRequestValidationError is the validation error returned by
// GetFriendGroupListRequest.Validate if the designated constraints aren't met.
type GetFriendGroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendGroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendGroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendGroupListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendGroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendGroupListRequestValidationError) ErrorName() string {
	return "GetFriendGroupListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendGroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendGroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendGroupListRequestValidationError{}

// Validate checks the field values on GetFriendGroupListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendGroupListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendGroupListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendGroupListResponseMultiError, or nil if none found.
func (m *GetFriendGroupListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendGroupListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendGroupListResponseMultiError(errors)
	}

	return nil
}

// GetFriendGroupListResponseMultiError is an error wrapping multiple
// validation errors returned by GetFriendGroupListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFriendGroupListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendGroupListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendGroupListResponseMultiError) AllErrors() []error { return m }

// GetFriendGroupListResponseValidationError is the validation error returned
// by GetFriendGroupListResponse.Validate if the designated constraints aren't met.
type GetFriendGroupListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendGroupListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendGroupListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendGroupListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendGroupListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendGroupListResponseValidationError) ErrorName() string {
	return "GetFriendGroupListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendGroupListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendGroupListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendGroupListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendGroupListResponseValidationError{}

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := CreateGroupRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupAvatar()); l < 1 || l > 255 {
		err := CreateGroupRequestValidationError{
			field:  "GroupAvatar",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupDesc()); l < 1 || l > 100 {
		err := CreateGroupRequestValidationError{
			field:  "GroupDesc",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GroupLeaderId

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupResponseMultiError, or nil if none found.
func (m *CreateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupResponseMultiError(errors)
	}

	return nil
}

// CreateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupResponseMultiError) AllErrors() []error { return m }

// CreateGroupResponseValidationError is the validation error returned by
// CreateGroupResponse.Validate if the designated constraints aren't met.
type CreateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupResponseValidationError) ErrorName() string {
	return "CreateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupResponseValidationError{}

// Validate checks the field values on GetGroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupListRequestMultiError, or nil if none found.
func (m *GetGroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGroupListRequestMultiError(errors)
	}

	return nil
}

// GetGroupListRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupListRequestMultiError) AllErrors() []error { return m }

// GetGroupListRequestValidationError is the validation error returned by
// GetGroupListRequest.Validate if the designated constraints aren't met.
type GetGroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupListRequestValidationError) ErrorName() string {
	return "GetGroupListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupListRequestValidationError{}

// Validate checks the field values on GetGroupListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupListResponseMultiError, or nil if none found.
func (m *GetGroupListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupListResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupListResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupListResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupListResponseMultiError(errors)
	}

	return nil
}

// GetGroupListResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupListResponseMultiError) AllErrors() []error { return m }

// GetGroupListResponseValidationError is the validation error returned by
// GetGroupListResponse.Validate if the designated constraints aren't met.
type GetGroupListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupListResponseValidationError) ErrorName() string {
	return "GetGroupListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupListResponseValidationError{}

// Validate checks the field values on GetGroupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupInfoRequestMultiError, or nil if none found.
func (m *GetGroupInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := GetGroupInfoRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupInfoRequestMultiError(errors)
	}

	return nil
}

// GetGroupInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupInfoRequestMultiError) AllErrors() []error { return m }

// GetGroupInfoRequestValidationError is the validation error returned by
// GetGroupInfoRequest.Validate if the designated constraints aren't met.
type GetGroupInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupInfoRequestValidationError) ErrorName() string {
	return "GetGroupInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupInfoRequestValidationError{}

// Validate checks the field values on GetGroupInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupInfoResponseMultiError, or nil if none found.
func (m *GetGroupInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupInfoResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupInfoResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupInfoResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupInfoResponseMultiError(errors)
	}

	return nil
}

// GetGroupInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupInfoResponseMultiError) AllErrors() []error { return m }

// GetGroupInfoResponseValidationError is the validation error returned by
// GetGroupInfoResponse.Validate if the designated constraints aren't met.
type GetGroupInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupInfoResponseValidationError) ErrorName() string {
	return "GetGroupInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupInfoResponseValidationError{}

// Validate checks the field values on UpdateGroupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupInfoRequestMultiError, or nil if none found.
func (m *UpdateGroupInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := UpdateGroupInfoRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupName()); l < 1 || l > 10 {
		err := UpdateGroupInfoRequestValidationError{
			field:  "GroupName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupAvatar()); l < 1 || l > 255 {
		err := UpdateGroupInfoRequestValidationError{
			field:  "GroupAvatar",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupDesc()); l < 1 || l > 100 {
		err := UpdateGroupInfoRequestValidationError{
			field:  "GroupDesc",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateGroupInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupInfoRequestMultiError) AllErrors() []error { return m }

// UpdateGroupInfoRequestValidationError is the validation error returned by
// UpdateGroupInfoRequest.Validate if the designated constraints aren't met.
type UpdateGroupInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupInfoRequestValidationError) ErrorName() string {
	return "UpdateGroupInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupInfoRequestValidationError{}

// Validate checks the field values on UpdateGroupInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupInfoResponseMultiError, or nil if none found.
func (m *UpdateGroupInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGroupInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateGroupInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupInfoResponseMultiError) AllErrors() []error { return m }

// UpdateGroupInfoResponseValidationError is the validation error returned by
// UpdateGroupInfoResponse.Validate if the designated constraints aren't met.
type UpdateGroupInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupInfoResponseValidationError) ErrorName() string {
	return "UpdateGroupInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupInfoResponseValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := DeleteGroupRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupResponseMultiError, or nil if none found.
func (m *DeleteGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupResponseMultiError) AllErrors() []error { return m }

// DeleteGroupResponseValidationError is the validation error returned by
// DeleteGroupResponse.Validate if the designated constraints aren't met.
type DeleteGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponseValidationError) ErrorName() string {
	return "DeleteGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponseValidationError{}

// Validate checks the field values on GetGroupMemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberListRequestMultiError, or nil if none found.
func (m *GetGroupMemberListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := GetGroupMemberListRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupMemberListRequestMultiError(errors)
	}

	return nil
}

// GetGroupMemberListRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberListRequest.ValidateAll() if the
// designated constraints aren't met.
type GetGroupMemberListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListRequestMultiError) AllErrors() []error { return m }

// GetGroupMemberListRequestValidationError is the validation error returned by
// GetGroupMemberListRequest.Validate if the designated constraints aren't met.
type GetGroupMemberListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListRequestValidationError) ErrorName() string {
	return "GetGroupMemberListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListRequestValidationError{}

// Validate checks the field values on GetGroupMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberListResponseMultiError, or nil if none found.
func (m *GetGroupMemberListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupMemberListResponseValidationError{
						field:  fmt.Sprintf("GroupMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupMemberListResponseValidationError{
						field:  fmt.Sprintf("GroupMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupMemberListResponseValidationError{
					field:  fmt.Sprintf("GroupMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupMemberListResponseMultiError(errors)
	}

	return nil
}

// GetGroupMemberListResponseMultiError is an error wrapping multiple
// validation errors returned by GetGroupMemberListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGroupMemberListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListResponseMultiError) AllErrors() []error { return m }

// GetGroupMemberListResponseValidationError is the validation error returned
// by GetGroupMemberListResponse.Validate if the designated constraints aren't met.
type GetGroupMemberListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListResponseValidationError) ErrorName() string {
	return "GetGroupMemberListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListResponseValidationError{}

// Validate checks the field values on GetGroupMemberInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberInfoRequestMultiError, or nil if none found.
func (m *GetGroupMemberInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := GetGroupMemberInfoRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGroupMemberInfoRequestMultiError(errors)
	}

	return nil
}

// GetGroupMemberInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberInfoRequest.ValidateAll() if the
// designated constraints aren't met.
type GetGroupMemberInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberInfoRequestMultiError) AllErrors() []error { return m }

// GetGroupMemberInfoRequestValidationError is the validation error returned by
// GetGroupMemberInfoRequest.Validate if the designated constraints aren't met.
type GetGroupMemberInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberInfoRequestValidationError) ErrorName() string {
	return "GetGroupMemberInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberInfoRequestValidationError{}

// Validate checks the field values on GetGroupMemberInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberInfoResponseMultiError, or nil if none found.
func (m *GetGroupMemberInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberInfoResponseValidationError{
					field:  "GroupMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberInfoResponseValidationError{
					field:  "GroupMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberInfoResponseValidationError{
				field:  "GroupMember",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupMemberInfoResponseMultiError(errors)
	}

	return nil
}

// GetGroupMemberInfoResponseMultiError is an error wrapping multiple
// validation errors returned by GetGroupMemberInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGroupMemberInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberInfoResponseMultiError) AllErrors() []error { return m }

// GetGroupMemberInfoResponseValidationError is the validation error returned
// by GetGroupMemberInfoResponse.Validate if the designated constraints aren't met.
type GetGroupMemberInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberInfoResponseValidationError) ErrorName() string {
	return "GetGroupMemberInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberInfoResponseValidationError{}

// Validate checks the field values on UpdateGroupMemberInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupMemberInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupMemberInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupMemberInfoRequestMultiError, or nil if none found.
func (m *UpdateGroupMemberInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupMemberInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := UpdateGroupMemberInfoRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetMemberNoteName()); l < 1 || l > 10 {
		err := UpdateGroupMemberInfoRequestValidationError{
			field:  "MemberNoteName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroupNoteName()); l < 1 || l > 10 {
		err := UpdateGroupMemberInfoRequestValidationError{
			field:  "GroupNoteName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateGroupMemberInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupMemberInfoRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateGroupMemberInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateGroupMemberInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupMemberInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupMemberInfoRequestMultiError) AllErrors() []error { return m }

// UpdateGroupMemberInfoRequestValidationError is the validation error returned
// by UpdateGroupMemberInfoRequest.Validate if the designated constraints
// aren't met.
type UpdateGroupMemberInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupMemberInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupMemberInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupMemberInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupMemberInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupMemberInfoRequestValidationError) ErrorName() string {
	return "UpdateGroupMemberInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupMemberInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupMemberInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupMemberInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupMemberInfoRequestValidationError{}

// Validate checks the field values on UpdateGroupMemberInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupMemberInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupMemberInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateGroupMemberInfoResponseMultiError, or nil if none found.
func (m *UpdateGroupMemberInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupMemberInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGroupMemberInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateGroupMemberInfoResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateGroupMemberInfoResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateGroupMemberInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupMemberInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupMemberInfoResponseMultiError) AllErrors() []error { return m }

// UpdateGroupMemberInfoResponseValidationError is the validation error
// returned by UpdateGroupMemberInfoResponse.Validate if the designated
// constraints aren't met.
type UpdateGroupMemberInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupMemberInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupMemberInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupMemberInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupMemberInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupMemberInfoResponseValidationError) ErrorName() string {
	return "UpdateGroupMemberInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupMemberInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupMemberInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupMemberInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupMemberInfoResponseValidationError{}

// Validate checks the field values on DeleteGroupMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupMemberRequestMultiError, or nil if none found.
func (m *DeleteGroupMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := DeleteGroupMemberRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	// no validation rules for AdminId

	if len(errors) > 0 {
		return DeleteGroupMemberRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupMemberRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupMemberRequestMultiError) AllErrors() []error { return m }

// DeleteGroupMemberRequestValidationError is the validation error returned by
// DeleteGroupMemberRequest.Validate if the designated constraints aren't met.
type DeleteGroupMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupMemberRequestValidationError) ErrorName() string {
	return "DeleteGroupMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupMemberRequestValidationError{}

// Validate checks the field values on DeleteGroupMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupMemberResponseMultiError, or nil if none found.
func (m *DeleteGroupMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGroupMemberResponseMultiError(errors)
	}

	return nil
}

// DeleteGroupMemberResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupMemberResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteGroupMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupMemberResponseMultiError) AllErrors() []error { return m }

// DeleteGroupMemberResponseValidationError is the validation error returned by
// DeleteGroupMemberResponse.Validate if the designated constraints aren't met.
type DeleteGroupMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupMemberResponseValidationError) ErrorName() string {
	return "DeleteGroupMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupMemberResponseValidationError{}

// Validate checks the field values on SendGroupRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupRequestRequestMultiError, or nil if none found.
func (m *SendGroupRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequesterId

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := SendGroupRequestRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDesc()); l < 1 || l > 100 {
		err := SendGroupRequestRequestValidationError{
			field:  "Desc",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendGroupRequestRequestMultiError(errors)
	}

	return nil
}

// SendGroupRequestRequestMultiError is an error wrapping multiple validation
// errors returned by SendGroupRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SendGroupRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupRequestRequestMultiError) AllErrors() []error { return m }

// SendGroupRequestRequestValidationError is the validation error returned by
// SendGroupRequestRequest.Validate if the designated constraints aren't met.
type SendGroupRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupRequestRequestValidationError) ErrorName() string {
	return "SendGroupRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupRequestRequestValidationError{}

// Validate checks the field values on SendGroupRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupRequestResponseMultiError, or nil if none found.
func (m *SendGroupRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupRequestResponseValidationError{
					field:  "GroupRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupRequestResponseValidationError{
					field:  "GroupRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupRequestResponseValidationError{
				field:  "GroupRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupRequestResponseMultiError(errors)
	}

	return nil
}

// SendGroupRequestResponseMultiError is an error wrapping multiple validation
// errors returned by SendGroupRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type SendGroupRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupRequestResponseMultiError) AllErrors() []error { return m }

// SendGroupRequestResponseValidationError is the validation error returned by
// SendGroupRequestResponse.Validate if the designated constraints aren't met.
type SendGroupRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupRequestResponseValidationError) ErrorName() string {
	return "SendGroupRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupRequestResponseValidationError{}

// Validate checks the field values on GetGroupRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequestListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestListRequestMultiError, or nil if none found.
func (m *GetGroupRequestListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequestListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := GetGroupRequestListRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupRequestListRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestListRequestMultiError is an error wrapping multiple
// validation errors returned by GetGroupRequestListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetGroupRequestListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestListRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestListRequestValidationError is the validation error returned
// by GetGroupRequestListRequest.Validate if the designated constraints aren't met.
type GetGroupRequestListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestListRequestValidationError) ErrorName() string {
	return "GetGroupRequestListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupRequestListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequestListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestListRequestValidationError{}

// Validate checks the field values on GetGroupRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequestListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestListResponseMultiError, or nil if none found.
func (m *GetGroupRequestListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequestListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupRequestListResponseValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupRequestListResponseValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupRequestListResponseValidationError{
					field:  fmt.Sprintf("GroupRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupRequestListResponseMultiError(errors)
	}

	return nil
}

// GetGroupRequestListResponseMultiError is an error wrapping multiple
// validation errors returned by GetGroupRequestListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGroupRequestListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestListResponseMultiError) AllErrors() []error { return m }

// GetGroupRequestListResponseValidationError is the validation error returned
// by GetGroupRequestListResponse.Validate if the designated constraints
// aren't met.
type GetGroupRequestListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestListResponseValidationError) ErrorName() string {
	return "GetGroupRequestListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupRequestListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequestListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestListResponseValidationError{}

// Validate checks the field values on GetGroupRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestRequestMultiError, or nil if none found.
func (m *GetGroupRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetGroupRequestRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestRequestValidationError is the validation error returned by
// GetGroupRequestRequest.Validate if the designated constraints aren't met.
type GetGroupRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestRequestValidationError) ErrorName() string {
	return "GetGroupRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestRequestValidationError{}

// Validate checks the field values on GetGroupRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestResponseMultiError, or nil if none found.
func (m *GetGroupRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupRequestResponseValidationError{
					field:  "GroupRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupRequestResponseValidationError{
					field:  "GroupRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupRequestResponseValidationError{
				field:  "GroupRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupRequestResponseMultiError(errors)
	}

	return nil
}

// GetGroupRequestResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestResponseMultiError) AllErrors() []error { return m }

// GetGroupRequestResponseValidationError is the validation error returned by
// GetGroupRequestResponse.Validate if the designated constraints aren't met.
type GetGroupRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestResponseValidationError) ErrorName() string {
	return "GetGroupRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestResponseValidationError{}

// Validate checks the field values on GetGroupRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestsRequestMultiError, or nil if none found.
func (m *GetGroupRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGroupRequestsRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestsRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestsRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestsRequestValidationError is the validation error returned by
// GetGroupRequestsRequest.Validate if the designated constraints aren't met.
type GetGroupRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestsRequestValidationError) ErrorName() string {
	return "GetGroupRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestsRequestValidationError{}

// Validate checks the field values on GetGroupRequestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestsResponseMultiError, or nil if none found.
func (m *GetGroupRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupRequestsResponseValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupRequestsResponseValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupRequestsResponseValidationError{
					field:  fmt.Sprintf("GroupRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupRequestsResponseMultiError(errors)
	}

	return nil
}

// GetGroupRequestsResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupRequestsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestsResponseMultiError) AllErrors() []error { return m }

// GetGroupRequestsResponseValidationError is the validation error returned by
// GetGroupRequestsResponse.Validate if the designated constraints aren't met.
type GetGroupRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestsResponseValidationError) ErrorName() string {
	return "GetGroupRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestsResponseValidationError{}

// Validate checks the field values on DealGroupRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealGroupRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealGroupRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealGroupRequestRequestMultiError, or nil if none found.
func (m *DealGroupRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DealGroupRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if _, ok := _DealGroupRequestRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := DealGroupRequestRequestValidationError{
			field:  "Status",
			reason: "value must be in list [1,2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DealGroupRequestRequestMultiError(errors)
	}

	return nil
}

// DealGroupRequestRequestMultiError is an error wrapping multiple validation
// errors returned by DealGroupRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type DealGroupRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealGroupRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealGroupRequestRequestMultiError) AllErrors() []error { return m }

// DealGroupRequestRequestValidationError is the validation error returned by
// DealGroupRequestRequest.Validate if the designated constraints aren't met.
type DealGroupRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealGroupRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealGroupRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealGroupRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealGroupRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealGroupRequestRequestValidationError) ErrorName() string {
	return "DealGroupRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DealGroupRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealGroupRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealGroupRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealGroupRequestRequestValidationError{}

var _DealGroupRequestRequest_Status_InLookup = map[string]struct{}{
	"1,2": {},
}

// Validate checks the field values on DealGroupRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DealGroupRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DealGroupRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DealGroupRequestResponseMultiError, or nil if none found.
func (m *DealGroupRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DealGroupRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DealGroupRequestResponseMultiError(errors)
	}

	return nil
}

// DealGroupRequestResponseMultiError is an error wrapping multiple validation
// errors returned by DealGroupRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type DealGroupRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DealGroupRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DealGroupRequestResponseMultiError) AllErrors() []error { return m }

// DealGroupRequestResponseValidationError is the validation error returned by
// DealGroupRequestResponse.Validate if the designated constraints aren't met.
type DealGroupRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DealGroupRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DealGroupRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DealGroupRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DealGroupRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DealGroupRequestResponseValidationError) ErrorName() string {
	return "DealGroupRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DealGroupRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDealGroupRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DealGroupRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DealGroupRequestResponseValidationError{}

// Validate checks the field values on CreateGroupAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupAdminRequestMultiError, or nil if none found.
func (m *CreateGroupAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := CreateGroupAdminRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateGroupAdminRequestMultiError(errors)
	}

	return nil
}

// CreateGroupAdminRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGroupAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupAdminRequestMultiError) AllErrors() []error { return m }

// CreateGroupAdminRequestValidationError is the validation error returned by
// CreateGroupAdminRequest.Validate if the designated constraints aren't met.
type CreateGroupAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupAdminRequestValidationError) ErrorName() string {
	return "CreateGroupAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupAdminRequestValidationError{}

// Validate checks the field values on CreateGroupAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupAdminResponseMultiError, or nil if none found.
func (m *CreateGroupAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGroupAdminResponseMultiError(errors)
	}

	return nil
}

// CreateGroupAdminResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGroupAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupAdminResponseMultiError) AllErrors() []error { return m }

// CreateGroupAdminResponseValidationError is the validation error returned by
// CreateGroupAdminResponse.Validate if the designated constraints aren't met.
type CreateGroupAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupAdminResponseValidationError) ErrorName() string {
	return "CreateGroupAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupAdminResponseValidationError{}

// Validate checks the field values on DeleteGroupAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupAdminRequestMultiError, or nil if none found.
func (m *DeleteGroupAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := DeleteGroupAdminRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteGroupAdminRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupAdminRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupAdminRequestMultiError) AllErrors() []error { return m }

// DeleteGroupAdminRequestValidationError is the validation error returned by
// DeleteGroupAdminRequest.Validate if the designated constraints aren't met.
type DeleteGroupAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupAdminRequestValidationError) ErrorName() string {
	return "DeleteGroupAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupAdminRequestValidationError{}

// Validate checks the field values on DeleteGroupAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupAdminResponseMultiError, or nil if none found.
func (m *DeleteGroupAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGroupAdminResponseMultiError(errors)
	}

	return nil
}

// DeleteGroupAdminResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupAdminResponseMultiError) AllErrors() []error { return m }

// DeleteGroupAdminResponseValidationError is the validation error returned by
// DeleteGroupAdminResponse.Validate if the designated constraints aren't met.
type DeleteGroupAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupAdminResponseValidationError) ErrorName() string {
	return "DeleteGroupAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupAdminResponseValidationError{}

// Validate checks the field values on GetGroupAdminListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAdminListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAdminListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAdminListRequestMultiError, or nil if none found.
func (m *GetGroupAdminListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAdminListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := GetGroupAdminListRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupAdminListRequestMultiError(errors)
	}

	return nil
}

// GetGroupAdminListRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupAdminListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupAdminListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAdminListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAdminListRequestMultiError) AllErrors() []error { return m }

// GetGroupAdminListRequestValidationError is the validation error returned by
// GetGroupAdminListRequest.Validate if the designated constraints aren't met.
type GetGroupAdminListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAdminListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAdminListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAdminListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAdminListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAdminListRequestValidationError) ErrorName() string {
	return "GetGroupAdminListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAdminListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAdminListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAdminListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAdminListRequestValidationError{}

// Validate checks the field values on GetGroupAdminListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAdminListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAdminListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAdminListResponseMultiError, or nil if none found.
func (m *GetGroupAdminListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAdminListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupAdmins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupAdminListResponseValidationError{
						field:  fmt.Sprintf("GroupAdmins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupAdminListResponseValidationError{
						field:  fmt.Sprintf("GroupAdmins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupAdminListResponseValidationError{
					field:  fmt.Sprintf("GroupAdmins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupAdminListResponseMultiError(errors)
	}

	return nil
}

// GetGroupAdminListResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupAdminListResponse.ValidateAll() if the
// designated constraints aren't met.
type GetGroupAdminListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAdminListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAdminListResponseMultiError) AllErrors() []error { return m }

// GetGroupAdminListResponseValidationError is the validation error returned by
// GetGroupAdminListResponse.Validate if the designated constraints aren't met.
type GetGroupAdminListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAdminListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAdminListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAdminListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAdminListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAdminListResponseValidationError) ErrorName() string {
	return "GetGroupAdminListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAdminListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAdminListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAdminListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAdminListResponseValidationError{}

// Validate checks the field values on GetGroupAdminInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAdminInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAdminInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAdminInfoRequestMultiError, or nil if none found.
func (m *GetGroupAdminInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAdminInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := GetGroupAdminInfoRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGroupAdminInfoRequestMultiError(errors)
	}

	return nil
}

// GetGroupAdminInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupAdminInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupAdminInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAdminInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAdminInfoRequestMultiError) AllErrors() []error { return m }

// GetGroupAdminInfoRequestValidationError is the validation error returned by
// GetGroupAdminInfoRequest.Validate if the designated constraints aren't met.
type GetGroupAdminInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAdminInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAdminInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAdminInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAdminInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAdminInfoRequestValidationError) ErrorName() string {
	return "GetGroupAdminInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAdminInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAdminInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAdminInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAdminInfoRequestValidationError{}

// Validate checks the field values on GetGroupAdminInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAdminInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAdminInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAdminInfoResponseMultiError, or nil if none found.
func (m *GetGroupAdminInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAdminInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupAdminInfoResponseValidationError{
					field:  "GroupAdmin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupAdminInfoResponseValidationError{
					field:  "GroupAdmin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupAdminInfoResponseValidationError{
				field:  "GroupAdmin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupAdminInfoResponseMultiError(errors)
	}

	return nil
}

// GetGroupAdminInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupAdminInfoResponse.ValidateAll() if the
// designated constraints aren't met.
type GetGroupAdminInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAdminInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAdminInfoResponseMultiError) AllErrors() []error { return m }

// GetGroupAdminInfoResponseValidationError is the validation error returned by
// GetGroupAdminInfoResponse.Validate if the designated constraints aren't met.
type GetGroupAdminInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAdminInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAdminInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAdminInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAdminInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAdminInfoResponseValidationError) ErrorName() string {
	return "GetGroupAdminInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAdminInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAdminInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAdminInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAdminInfoResponseValidationError{}

// Validate checks the field values on CheckAdminRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAdminRequestMultiError, or nil if none found.
func (m *CheckAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := CheckAdminRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return CheckAdminRequestMultiError(errors)
	}

	return nil
}

// CheckAdminRequestMultiError is an error wrapping multiple validation errors
// returned by CheckAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAdminRequestMultiError) AllErrors() []error { return m }

// CheckAdminRequestValidationError is the validation error returned by
// CheckAdminRequest.Validate if the designated constraints aren't met.
type CheckAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAdminRequestValidationError) ErrorName() string {
	return "CheckAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAdminRequestValidationError{}

// Validate checks the field values on CheckAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAdminResponseMultiError, or nil if none found.
func (m *CheckAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAdmin

	if len(errors) > 0 {
		return CheckAdminResponseMultiError(errors)
	}

	return nil
}

// CheckAdminResponseMultiError is an error wrapping multiple validation errors
// returned by CheckAdminResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAdminResponseMultiError) AllErrors() []error { return m }

// CheckAdminResponseValidationError is the validation error returned by
// CheckAdminResponse.Validate if the designated constraints aren't met.
type CheckAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAdminResponseValidationError) ErrorName() string {
	return "CheckAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAdminResponseValidationError{}

// Validate checks the field values on GetGroupMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberRequestMultiError, or nil if none found.
func (m *GetGroupMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := GetGroupMemberRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGroupMemberRequestMultiError(errors)
	}

	return nil
}

// GetGroupMemberRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberRequestMultiError) AllErrors() []error { return m }

// GetGroupMemberRequestValidationError is the validation error returned by
// GetGroupMemberRequest.Validate if the designated constraints aren't met.
type GetGroupMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberRequestValidationError) ErrorName() string {
	return "GetGroupMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberRequestValidationError{}

// Validate checks the field values on CheckLeaderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckLeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckLeaderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckLeaderRequestMultiError, or nil if none found.
func (m *CheckLeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckLeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := CheckLeaderRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return CheckLeaderRequestMultiError(errors)
	}

	return nil
}

// CheckLeaderRequestMultiError is an error wrapping multiple validation errors
// returned by CheckLeaderRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckLeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckLeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckLeaderRequestMultiError) AllErrors() []error { return m }

// CheckLeaderRequestValidationError is the validation error returned by
// CheckLeaderRequest.Validate if the designated constraints aren't met.
type CheckLeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckLeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckLeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckLeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckLeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckLeaderRequestValidationError) ErrorName() string {
	return "CheckLeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckLeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckLeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckLeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckLeaderRequestValidationError{}

// Validate checks the field values on CheckLeaderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckLeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckLeaderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckLeaderResponseMultiError, or nil if none found.
func (m *CheckLeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckLeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsLeader

	if len(errors) > 0 {
		return CheckLeaderResponseMultiError(errors)
	}

	return nil
}

// CheckLeaderResponseMultiError is an error wrapping multiple validation
// errors returned by CheckLeaderResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckLeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckLeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckLeaderResponseMultiError) AllErrors() []error { return m }

// CheckLeaderResponseValidationError is the validation error returned by
// CheckLeaderResponse.Validate if the designated constraints aren't met.
type CheckLeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckLeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckLeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckLeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckLeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckLeaderResponseValidationError) ErrorName() string {
	return "CheckLeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckLeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckLeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckLeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckLeaderResponseValidationError{}

// Validate checks the field values on CheckMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckMemberRequestMultiError, or nil if none found.
func (m *CheckMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetGroupId()); l < 10 || l > 13 {
		err := CheckMemberRequestValidationError{
			field:  "GroupId",
			reason: "value length must be between 10 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return CheckMemberRequestMultiError(errors)
	}

	return nil
}

// CheckMemberRequestMultiError is an error wrapping multiple validation errors
// returned by CheckMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckMemberRequestMultiError) AllErrors() []error { return m }

// CheckMemberRequestValidationError is the validation error returned by
// CheckMemberRequest.Validate if the designated constraints aren't met.
type CheckMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckMemberRequestValidationError) ErrorName() string {
	return "CheckMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckMemberRequestValidationError{}

// Validate checks the field values on CheckMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckMemberResponseMultiError, or nil if none found.
func (m *CheckMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsMember

	if len(errors) > 0 {
		return CheckMemberResponseMultiError(errors)
	}

	return nil
}

// CheckMemberResponseMultiError is an error wrapping multiple validation
// errors returned by CheckMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckMemberResponseMultiError) AllErrors() []error { return m }

// CheckMemberResponseValidationError is the validation error returned by
// CheckMemberResponse.Validate if the designated constraints aren't met.
type CheckMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckMemberResponseValidationError) ErrorName() string {
	return "CheckMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckMemberResponseValidationError{}
