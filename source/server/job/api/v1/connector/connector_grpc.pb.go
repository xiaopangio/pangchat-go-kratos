// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/connector/connector.proto

package connector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorService_Login_FullMethodName                 = "/api.v1.connector.ConnectorService/Login"
	ConnectorService_Logout_FullMethodName                = "/api.v1.connector.ConnectorService/Logout"
	ConnectorService_PushFriendRequests_FullMethodName    = "/api.v1.connector.ConnectorService/PushFriendRequests"
	ConnectorService_PushFriend_FullMethodName            = "/api.v1.connector.ConnectorService/PushFriend"
	ConnectorService_PushMessage_FullMethodName           = "/api.v1.connector.ConnectorService/PushMessage"
	ConnectorService_ReplyMessage_FullMethodName          = "/api.v1.connector.ConnectorService/ReplyMessage"
	ConnectorService_PushUnreadMessageList_FullMethodName = "/api.v1.connector.ConnectorService/PushUnreadMessageList"
)

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	PushFriendRequests(ctx context.Context, in *PushFriendRequestsRequest, opts ...grpc.CallOption) (*PushFriendRequestsResponse, error)
	PushFriend(ctx context.Context, in *PushFriendRequest, opts ...grpc.CallOption) (*PushFriendResponse, error)
	PushMessage(ctx context.Context, in *PushMessageRequest, opts ...grpc.CallOption) (*PushMessageResponse, error)
	ReplyMessage(ctx context.Context, in *ReplyMessageRequest, opts ...grpc.CallOption) (*ReplyMessageResponse, error)
	PushUnreadMessageList(ctx context.Context, in *PushUnreadMessageListRequest, opts ...grpc.CallOption) (*PushUnreadMessageListResponse, error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ConnectorService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, ConnectorService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) PushFriendRequests(ctx context.Context, in *PushFriendRequestsRequest, opts ...grpc.CallOption) (*PushFriendRequestsResponse, error) {
	out := new(PushFriendRequestsResponse)
	err := c.cc.Invoke(ctx, ConnectorService_PushFriendRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) PushFriend(ctx context.Context, in *PushFriendRequest, opts ...grpc.CallOption) (*PushFriendResponse, error) {
	out := new(PushFriendResponse)
	err := c.cc.Invoke(ctx, ConnectorService_PushFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) PushMessage(ctx context.Context, in *PushMessageRequest, opts ...grpc.CallOption) (*PushMessageResponse, error) {
	out := new(PushMessageResponse)
	err := c.cc.Invoke(ctx, ConnectorService_PushMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ReplyMessage(ctx context.Context, in *ReplyMessageRequest, opts ...grpc.CallOption) (*ReplyMessageResponse, error) {
	out := new(ReplyMessageResponse)
	err := c.cc.Invoke(ctx, ConnectorService_ReplyMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) PushUnreadMessageList(ctx context.Context, in *PushUnreadMessageListRequest, opts ...grpc.CallOption) (*PushUnreadMessageListResponse, error) {
	out := new(PushUnreadMessageListResponse)
	err := c.cc.Invoke(ctx, ConnectorService_PushUnreadMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServiceServer is the server API for ConnectorService service.
// All implementations must embed UnimplementedConnectorServiceServer
// for forward compatibility
type ConnectorServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	PushFriendRequests(context.Context, *PushFriendRequestsRequest) (*PushFriendRequestsResponse, error)
	PushFriend(context.Context, *PushFriendRequest) (*PushFriendResponse, error)
	PushMessage(context.Context, *PushMessageRequest) (*PushMessageResponse, error)
	ReplyMessage(context.Context, *ReplyMessageRequest) (*ReplyMessageResponse, error)
	PushUnreadMessageList(context.Context, *PushUnreadMessageListRequest) (*PushUnreadMessageListResponse, error)
	mustEmbedUnimplementedConnectorServiceServer()
}

// UnimplementedConnectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectorServiceServer struct {
}

func (UnimplementedConnectorServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedConnectorServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedConnectorServiceServer) PushFriendRequests(context.Context, *PushFriendRequestsRequest) (*PushFriendRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFriendRequests not implemented")
}
func (UnimplementedConnectorServiceServer) PushFriend(context.Context, *PushFriendRequest) (*PushFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFriend not implemented")
}
func (UnimplementedConnectorServiceServer) PushMessage(context.Context, *PushMessageRequest) (*PushMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (UnimplementedConnectorServiceServer) ReplyMessage(context.Context, *ReplyMessageRequest) (*ReplyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyMessage not implemented")
}
func (UnimplementedConnectorServiceServer) PushUnreadMessageList(context.Context, *PushUnreadMessageListRequest) (*PushUnreadMessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUnreadMessageList not implemented")
}
func (UnimplementedConnectorServiceServer) mustEmbedUnimplementedConnectorServiceServer() {}

// UnsafeConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServiceServer will
// result in compilation errors.
type UnsafeConnectorServiceServer interface {
	mustEmbedUnimplementedConnectorServiceServer()
}

func RegisterConnectorServiceServer(s grpc.ServiceRegistrar, srv ConnectorServiceServer) {
	s.RegisterService(&ConnectorService_ServiceDesc, srv)
}

func _ConnectorService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_PushFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFriendRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).PushFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_PushFriendRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).PushFriendRequests(ctx, req.(*PushFriendRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_PushFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).PushFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_PushFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).PushFriend(ctx, req.(*PushFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_PushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).PushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_PushMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).PushMessage(ctx, req.(*PushMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ReplyMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ReplyMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_ReplyMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ReplyMessage(ctx, req.(*ReplyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_PushUnreadMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushUnreadMessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).PushUnreadMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_PushUnreadMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).PushUnreadMessageList(ctx, req.(*PushUnreadMessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorService_ServiceDesc is the grpc.ServiceDesc for ConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.connector.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ConnectorService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ConnectorService_Logout_Handler,
		},
		{
			MethodName: "PushFriendRequests",
			Handler:    _ConnectorService_PushFriendRequests_Handler,
		},
		{
			MethodName: "PushFriend",
			Handler:    _ConnectorService_PushFriend_Handler,
		},
		{
			MethodName: "PushMessage",
			Handler:    _ConnectorService_PushMessage_Handler,
		},
		{
			MethodName: "ReplyMessage",
			Handler:    _ConnectorService_ReplyMessage_Handler,
		},
		{
			MethodName: "PushUnreadMessageList",
			Handler:    _ConnectorService_PushUnreadMessageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/connector/connector.proto",
}
